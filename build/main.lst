ARM GAS  /tmp/ccd0a1wf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB248:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** #include "main.h"
   2:Core/Src/main.c **** #include <string.h>
   3:Core/Src/main.c **** #include <stdio.h>
   4:Core/Src/main.c **** 
   5:Core/Src/main.c **** ADC_HandleTypeDef  hadc1;
   6:Core/Src/main.c **** DMA_HandleTypeDef  hdma_adc1;
   7:Core/Src/main.c **** ADC_HandleTypeDef  hadc2;
   8:Core/Src/main.c **** DMA_HandleTypeDef  hdma_adc2;
   9:Core/Src/main.c **** 
  10:Core/Src/main.c **** DAC_HandleTypeDef  hdac;
  11:Core/Src/main.c **** DMA_HandleTypeDef  hdma_dac1;
  12:Core/Src/main.c **** TIM_HandleTypeDef  htim2;
  13:Core/Src/main.c **** UART_HandleTypeDef huart2;
  14:Core/Src/main.c **** 
  15:Core/Src/main.c **** void SystemClock_Config(void);
  16:Core/Src/main.c **** void SystemClockHSE_Config(void) ;
  17:Core/Src/main.c **** static void MX_GPIO_Init(void);
  18:Core/Src/main.c **** static void MX_DMA_Init(void);
  19:Core/Src/main.c **** static void MX_ADC1_Init(void);
  20:Core/Src/main.c **** static void MX_ADC2_Init(void);
  21:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  22:Core/Src/main.c **** static void MX_DAC_Init(void);
  23:Core/Src/main.c **** static void MX_TIM2_Init(void);
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** #define HSE_BYPASS
  26:Core/Src/main.c **** //#define OVERCLOCK    // Define this to increase CPU Clock
  27:Core/Src/main.c **** //#define DEBUG        // Define this if debugging with a LED connected to DAC Out
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** #ifdef DEBUG
  30:Core/Src/main.c ****   #define RAMP_FREQUENCY 1 // Hz
  31:Core/Src/main.c **** #else
ARM GAS  /tmp/ccd0a1wf.s 			page 2


  32:Core/Src/main.c ****   #define RAMP_FREQUENCY 20 // Hz
  33:Core/Src/main.c **** #endif
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** #define DAC_BUFFERED
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** typedef uint8_t bool;
  38:Core/Src/main.c **** #define false 0
  39:Core/Src/main.c **** #define true  !false
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** #define NS 4096
  42:Core/Src/main.c **** #define AVERNUM RAMP_FREQUENCY
  43:Core/Src/main.c **** uint16_t Ramp[NS];
  44:Core/Src/main.c **** uint16_t adc_val[2*NS];
  45:Core/Src/main.c **** uint16_t txBuff[NS];
  46:Core/Src/main.c **** uint32_t avg[NS];
  47:Core/Src/main.c **** uint16_t nAvg;
  48:Core/Src/main.c **** uint16_t rampMin = 0;
  49:Core/Src/main.c **** uint16_t rampMax = 4095;
  50:Core/Src/main.c **** __IO bool ready_1_half=false;
  51:Core/Src/main.c **** __IO bool ready_2_half=false;
  52:Core/Src/main.c **** bool bNewData;
  53:Core/Src/main.c **** char outBuff[80];
  54:Core/Src/main.c **** bool bNewRamp = false;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** void
  58:Core/Src/main.c **** buildRamp(int16_t np, uint16_t min, uint16_t max, uint16_t* pRamp) {
  59:Core/Src/main.c ****     float factor = (float)(max-min)/(float)np;
  60:Core/Src/main.c ****     for(int16_t i=0; i<np; i++) {
  61:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
  62:Core/Src/main.c ****     }
  63:Core/Src/main.c **** }
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** // ADC1 In0  ==> PA0
  67:Core/Src/main.c **** // DAC  Out  ==> PA4
  68:Core/Src/main.c **** // ADC2_In14 ==> PC4
  69:Core/Src/main.c **** // ADC2_In15 ==> PC5
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** int 
  73:Core/Src/main.c **** main(void) {
  74:Core/Src/main.c ****     #ifdef DEBUG
  75:Core/Src/main.c ****         buildRamp(NS, rampMin, rampMax, Ramp);
  76:Core/Src/main.c ****     #else
  77:Core/Src/main.c ****         buildRamp(NS, rampMin, rampMax, Ramp);
  78:Core/Src/main.c ****     #endif
  79:Core/Src/main.c ****     ready_1_half = false;
  80:Core/Src/main.c ****     ready_2_half = false;
  81:Core/Src/main.c ****     memset(avg, 0, sizeof(avg));
  82:Core/Src/main.c ****     nAvg = 0;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****     HAL_Init();
  85:Core/Src/main.c ****     // SystemClock_Config();
  86:Core/Src/main.c ****     SystemClockHSE_Config();
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****     MX_GPIO_Init();
ARM GAS  /tmp/ccd0a1wf.s 			page 3


  89:Core/Src/main.c ****     MX_DMA_Init();
  90:Core/Src/main.c ****     MX_ADC1_Init();
  91:Core/Src/main.c ****     MX_ADC2_Init();
  92:Core/Src/main.c ****     MX_USART2_UART_Init();
  93:Core/Src/main.c ****     MX_DAC_Init();
  94:Core/Src/main.c ****     MX_TIM2_Init();
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****     if(HAL_DAC_Start_DMA(&hdac,
  97:Core/Src/main.c ****                          DAC_CHANNEL_1, 
  98:Core/Src/main.c ****                          (uint32_t*)Ramp, 
  99:Core/Src/main.c ****                          NS, 
 100:Core/Src/main.c ****                          DAC_ALIGN_12B_R))
 101:Core/Src/main.c ****         Error_Handler(); 
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****     if(HAL_ADC_Start_DMA(&hadc1,
 104:Core/Src/main.c ****                          (uint32_t*)&adc_val,
 105:Core/Src/main.c ****                          2*NS))
 106:Core/Src/main.c ****         Error_Handler(); 
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****     if(HAL_TIM_Base_Start(&htim2))
 109:Core/Src/main.c ****         Error_Handler();
 110:Core/Src/main.c ****     
 111:Core/Src/main.c ****     // start pwm generation (is This needed ?)
 112:Core/Src/main.c ****     // if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1))
 113:Core/Src/main.c ****     //     Error_Handler();
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****     bNewData = false;
 116:Core/Src/main.c ****     while (1) {
 117:Core/Src/main.c ****         if(ready_1_half) {
 118:Core/Src/main.c ****             ready_1_half = false;
 119:Core/Src/main.c ****             HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 120:Core/Src/main.c ****             memcpy(txBuff, adc_val, NS*sizeof(*adc_val));
 121:Core/Src/main.c ****             bNewData = true;
 122:Core/Src/main.c ****         }
 123:Core/Src/main.c ****         else if(ready_2_half) {
 124:Core/Src/main.c ****             ready_2_half = false;
 125:Core/Src/main.c ****             HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 126:Core/Src/main.c ****             memcpy(txBuff, &adc_val[NS], NS*sizeof(*adc_val));
 127:Core/Src/main.c ****             bNewData = true;
 128:Core/Src/main.c ****         }
 129:Core/Src/main.c ****         else {
 130:Core/Src/main.c ****             if(bNewData) {
 131:Core/Src/main.c ****                 bNewData = false;
 132:Core/Src/main.c ****                 for(int i=0; i<NS; i++) {
 133:Core/Src/main.c ****                     avg[i] += txBuff[i];
 134:Core/Src/main.c ****                 }
 135:Core/Src/main.c ****                 nAvg++;
 136:Core/Src/main.c ****                 if(nAvg >= AVERNUM) {
 137:Core/Src/main.c ****                     HAL_TIM_Base_Stop(&htim2);
 138:Core/Src/main.c ****                     HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 139:Core/Src/main.c ****                     HAL_ADC_Stop_DMA(&hadc1);
 140:Core/Src/main.c ****                     for(int i=0; i<NS; i++) {
 141:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 142:Core/Src/main.c ****                         //sprintf(outBuff, "i=%d f=%ld\n\r", i, avg[i]);
 143:Core/Src/main.c ****                         //HAL_UART_Transmit(&huart2, (uint8_t*)outBuff, strlen(outBuff), 10);
 144:Core/Src/main.c ****                     }
 145:Core/Src/main.c ****                     nAvg = 0;
ARM GAS  /tmp/ccd0a1wf.s 			page 4


 146:Core/Src/main.c ****                     memset(avg, 0, sizeof(avg));
 147:Core/Src/main.c ****                     if(HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 148:Core/Src/main.c ****                         Error_Handler();
 149:Core/Src/main.c ****                     ready_1_half = false;
 150:Core/Src/main.c ****                     ready_2_half = false;
 151:Core/Src/main.c ****                     HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)Ramp, NS, DAC_ALIGN_12B_R);
 152:Core/Src/main.c ****                     HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 2*NS);
 153:Core/Src/main.c ****                     HAL_TIM_Base_Start(&htim2);
 154:Core/Src/main.c ****                 }
 155:Core/Src/main.c ****             }
 156:Core/Src/main.c ****             // HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 157:Core/Src/main.c ****         }
 158:Core/Src/main.c ****         if(bNewRamp) {
 159:Core/Src/main.c ****             bNewRamp = false;
 160:Core/Src/main.c ****             rampMin = (uint16_t)HAL_ADC_GetValue(&hadc2);
 161:Core/Src/main.c ****             rampMax = (uint16_t)HAL_ADC_GetValue(&hadc2);
 162:Core/Src/main.c ****             sprintf(outBuff, "Ramp Min=%d Ramp Max=%d\n\r", rampMin, rampMax);
 163:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, (uint8_t*)outBuff, strlen(outBuff), 10);
 164:Core/Src/main.c ****         }
 165:Core/Src/main.c ****     } // while(true)
 166:Core/Src/main.c **** }
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** /**
 170:Core/Src/main.c ****   * @brief  System Clock Configuration
 171:Core/Src/main.c ****   *         The system Clock is configured as follow : 
 172:Core/Src/main.c ****   *            System Clock source            = PLL (HSE_CRYSTAL or HSE_BYPASS) 
 173:Core/Src/main.c ****   *            SYSCLK(Hz)                     = 180000000
 174:Core/Src/main.c ****   *            HCLK(Hz)                       = 180000000
 175:Core/Src/main.c ****   *            AHB Prescaler                  = 1
 176:Core/Src/main.c ****   *            APB1 Prescaler                 = 4
 177:Core/Src/main.c ****   *            APB2 Prescaler                 = 2
 178:Core/Src/main.c ****   *            HSE Frequency(Hz)              = 8000000
 179:Core/Src/main.c ****   *            PLL_M                          = 8
 180:Core/Src/main.c ****   *            PLL_N                          = 360
 181:Core/Src/main.c ****   *            PLL_P                          = 2
 182:Core/Src/main.c ****   *            PLL_Q                          = 7
 183:Core/Src/main.c ****   *            VDD(V)                         = 3.3
 184:Core/Src/main.c ****   *            Main regulator output voltage  = Scale1 mode
 185:Core/Src/main.c ****   *            Flash Latency(WS)              = 5
 186:Core/Src/main.c ****   * @param  None
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** void
 190:Core/Src/main.c **** SystemClockHSE_Config(void) {
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 192:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 193:Core/Src/main.c ****   HAL_StatusTypeDef ret = HAL_OK;
 194:Core/Src/main.c ****     
 195:Core/Src/main.c ****   /* Enable Power Control clock */
 196:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 197:Core/Src/main.c ****   
 198:Core/Src/main.c ****   /* The voltage scaling allows optimizing the power consumption when the device is 
 199:Core/Src/main.c ****      clocked below the maximum system frequency, to update the voltage scaling value 
 200:Core/Src/main.c ****      regarding system frequency refer to product datasheet.  */
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 202:Core/Src/main.c **** 
ARM GAS  /tmp/ccd0a1wf.s 			page 5


 203:Core/Src/main.c ****   /* -1- Select HSI as system clock source to allow modification of the PLL configuration */
 204:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType    = RCC_CLOCKTYPE_SYSCLK;
 205:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 206:Core/Src/main.c ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 207:Core/Src/main.c ****     Error_Handler();
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   
 210:Core/Src/main.c ****   /* -2- Enable HSE Oscillator, select it as PLL source and finally activate the PLL */
 211:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 212:Core/Src/main.c ****   
 213:Core/Src/main.c **** #ifdef HSE_CRYSTAL  
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 215:Core/Src/main.c **** #elif defined (HSE_BYPASS)
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 217:Core/Src/main.c **** #endif /* HSE_CRYSTAL */
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState  = RCC_PLL_ON;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM      = 8;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN      = 360;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP      = RCC_PLLP_DIV2; 
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ      = 7;
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR      = 6;
 225:Core/Src/main.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 226:Core/Src/main.c ****     /* Initialization Error */
 227:Core/Src/main.c ****     Error_Handler();
 228:Core/Src/main.c ****   }
 229:Core/Src/main.c ****   
 230:Core/Src/main.c ****    /* Activate the OverDrive to reach the 180 MHz Frequency */  
 231:Core/Src/main.c ****   ret = HAL_PWREx_EnableOverDrive();
 232:Core/Src/main.c ****   if(ret != HAL_OK) {
 233:Core/Src/main.c ****     while(1) { ; }
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c ****   /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
 236:Core/Src/main.c ****      clocks dividers */
 237:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | 
 238:Core/Src/main.c ****                                       RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 239:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 240:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 243:Core/Src/main.c ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 244:Core/Src/main.c ****     Error_Handler();
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   
 247:Core/Src/main.c ****   /* -4- Optional: Disable HSI Oscillator (if the HSI is no more needed by the application) */
 248:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 249:Core/Src/main.c ****   RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_NONE;
 251:Core/Src/main.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 252:Core/Src/main.c ****     Error_Handler();
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c **** }
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** #ifdef OVERCLOCK
 259:Core/Src/main.c **** void
ARM GAS  /tmp/ccd0a1wf.s 			page 6


 260:Core/Src/main.c **** SystemClock_Config(void) {
 261:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 262:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   // Configure the main internal regulator output voltage
 265:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 266:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 267:Core/Src/main.c ****   // Initializes the RCC Oscillators according to the specified parameters
 268:Core/Src/main.c ****   // in the RCC_OscInitTypeDef structure.
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 271:Core/Src/main.c ****   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 272:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 273:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 274:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 275:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM            = 16;
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN            = 360;
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ            = 7;
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR            = 6;
 280:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 281:Core/Src/main.c ****     Error_Handler();
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   // Activate the Over-Drive mode
 285:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   // Initializes the CPU, AHB and APB buses clocks
 290:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 291:Core/Src/main.c ****                                      RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 292:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 293:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 298:Core/Src/main.c ****     Error_Handler();
 299:Core/Src/main.c ****   }
 300:Core/Src/main.c **** }
 301:Core/Src/main.c **** 
 302:Core/Src/main.c **** #else // Not OVERCLOCK
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** void 
 305:Core/Src/main.c **** SystemClock_Config(void) {
 306:Core/Src/main.c ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 307:Core/Src/main.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 310:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****     RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 313:Core/Src/main.c ****     RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 314:Core/Src/main.c ****     RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 315:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 316:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
ARM GAS  /tmp/ccd0a1wf.s 			page 7


 317:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLM            = 16;
 318:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLN            = 336;
 319:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV4;
 320:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLQ            = 2;
 321:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLR            = 2;
 322:Core/Src/main.c ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 323:Core/Src/main.c ****         Error_Handler();
 324:Core/Src/main.c ****     }
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****     RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 327:Core/Src/main.c ****                                        RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 328:Core/Src/main.c ****     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 329:Core/Src/main.c ****     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 330:Core/Src/main.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 331:Core/Src/main.c ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 334:Core/Src/main.c ****         Error_Handler();
 335:Core/Src/main.c ****     }
 336:Core/Src/main.c **** }
 337:Core/Src/main.c **** #endif // OVERCLOCK
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** static void
 341:Core/Src/main.c **** MX_ADC1_Init(void) {
 342:Core/Src/main.c ****     ADC_ChannelConfTypeDef sConfig = {0};
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****     hadc1.Instance = ADC1;
 345:Core/Src/main.c ****     hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 346:Core/Src/main.c ****     hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 347:Core/Src/main.c ****     hadc1.Init.ScanConvMode          = DISABLE;
 348:Core/Src/main.c ****     hadc1.Init.ContinuousConvMode    = DISABLE;
 349:Core/Src/main.c ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 350:Core/Src/main.c ****     hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 351:Core/Src/main.c ****     hadc1.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T2_TRGO;
 352:Core/Src/main.c ****     hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 353:Core/Src/main.c ****     hadc1.Init.NbrOfConversion       = 1;
 354:Core/Src/main.c ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 355:Core/Src/main.c ****     hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 356:Core/Src/main.c ****     if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 357:Core/Src/main.c ****         Error_Handler();
 358:Core/Src/main.c ****     }
 359:Core/Src/main.c ****     // The total conversion time is calculated as follows:
 360:Core/Src/main.c ****     // Tconv = ADC_SAMPLETIME + 12 cycles
 361:Core/Src/main.c ****     sConfig.Channel      = ADC_CHANNEL_0;
 362:Core/Src/main.c ****     sConfig.Rank         = 1;
 363:Core/Src/main.c ****     sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;//ADC_SAMPLETIME_3CYCLES;
 364:Core/Src/main.c ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 365:Core/Src/main.c ****         Error_Handler();
 366:Core/Src/main.c ****     }
 367:Core/Src/main.c **** }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** /**
 371:Core/Src/main.c ****   * @brief ADC2 Initialization Function
 372:Core/Src/main.c ****   * @param None
 373:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccd0a1wf.s 			page 8


 374:Core/Src/main.c ****   */
 375:Core/Src/main.c **** static void 
 376:Core/Src/main.c **** MX_ADC2_Init(void) {
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 379:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 384:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 387:Core/Src/main.c ****   */
 388:Core/Src/main.c ****   hadc2.Instance = ADC2;
 389:Core/Src/main.c ****   hadc2.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 390:Core/Src/main.c ****   hadc2.Init.Resolution            = ADC_RESOLUTION_12B;
 391:Core/Src/main.c ****   hadc2.Init.ScanConvMode          = ENABLE;
 392:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode    = DISABLE;
 393:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 394:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 395:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 396:Core/Src/main.c ****   hadc2.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 397:Core/Src/main.c ****   hadc2.Init.NbrOfConversion       = 2;
 398:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 399:Core/Src/main.c ****   hadc2.Init.EOCSelection          = ADC_EOC_SEQ_CONV;
 400:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 401:Core/Src/main.c ****       Error_Handler();
 402:Core/Src/main.c ****   }
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 405:Core/Src/main.c ****   */
 406:Core/Src/main.c ****   sConfig.Channel      = ADC_CHANNEL_14;
 407:Core/Src/main.c ****   sConfig.Rank         = 1;
 408:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 410:Core/Src/main.c ****       Error_Handler();
 411:Core/Src/main.c ****   }
 412:Core/Src/main.c ****   sConfig.Channel      = ADC_CHANNEL_15;
 413:Core/Src/main.c ****   sConfig.Rank         = 2;
 414:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 415:Core/Src/main.c ****       Error_Handler();
 416:Core/Src/main.c ****   }
 417:Core/Src/main.c **** }
 418:Core/Src/main.c **** 
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** static void
 421:Core/Src/main.c **** MX_DAC_Init(void) {
 422:Core/Src/main.c ****     DAC_ChannelConfTypeDef sConfig = {0};
 423:Core/Src/main.c ****     hdac.Instance = DAC;
 424:Core/Src/main.c ****     if (HAL_DAC_Init(&hdac) != HAL_OK) {
 425:Core/Src/main.c ****         Error_Handler();
 426:Core/Src/main.c ****     }
 427:Core/Src/main.c ****     sConfig.DAC_Trigger          = DAC_TRIGGER_T2_TRGO;
 428:Core/Src/main.c ****     #ifdef DAC_BUFFERED
 429:Core/Src/main.c ****         sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 430:Core/Src/main.c ****     #else
ARM GAS  /tmp/ccd0a1wf.s 			page 9


 431:Core/Src/main.c ****         sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 432:Core/Src/main.c ****     #endif
 433:Core/Src/main.c ****     if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 434:Core/Src/main.c ****         Error_Handler();
 435:Core/Src/main.c ****     }
 436:Core/Src/main.c **** }
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** static void
 440:Core/Src/main.c **** MX_TIM2_Init(void) {
 441:Core/Src/main.c ****     uint32_t periodValue = (uint32_t)((SystemCoreClock)/(RAMP_FREQUENCY*NS));
 442:Core/Src/main.c ****     if(periodValue < 2) {
 443:Core/Src/main.c ****         Error_Handler();
 444:Core/Src/main.c ****     }
 445:Core/Src/main.c ****     periodValue -= 1;
 446:Core/Src/main.c ****     uint32_t prescalerValue = 0;
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 449:Core/Src/main.c ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 450:Core/Src/main.c ****     TIM_OC_InitTypeDef sConfigOC = {0};
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****     htim2.Instance = TIM2;
 453:Core/Src/main.c ****     htim2.Init.Prescaler         = prescalerValue;
 454:Core/Src/main.c ****     htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 455:Core/Src/main.c ****     htim2.Init.Period            = periodValue;
 456:Core/Src/main.c ****     htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 457:Core/Src/main.c ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 458:Core/Src/main.c ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 459:Core/Src/main.c ****         Error_Handler();
 460:Core/Src/main.c ****     }
 461:Core/Src/main.c ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 462:Core/Src/main.c ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 463:Core/Src/main.c ****         Error_Handler();
 464:Core/Src/main.c ****     }
 465:Core/Src/main.c ****     // Serve ?
 466:Core/Src/main.c ****     // if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 467:Core/Src/main.c ****     //     Error_Handler();
 468:Core/Src/main.c ****     // }
 469:Core/Src/main.c ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 470:Core/Src/main.c ****     sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 471:Core/Src/main.c ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 472:Core/Src/main.c ****         Error_Handler();
 473:Core/Src/main.c ****     }
 474:Core/Src/main.c ****     sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 475:Core/Src/main.c ****     sConfigOC.Pulse      = 0;
 476:Core/Src/main.c ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 477:Core/Src/main.c ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 478:Core/Src/main.c ****     if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 479:Core/Src/main.c ****         Error_Handler();
 480:Core/Src/main.c ****     }
 481:Core/Src/main.c **** }
 482:Core/Src/main.c **** 
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** static void 
 485:Core/Src/main.c **** MX_USART2_UART_Init(void) {
 486:Core/Src/main.c ****     huart2.Instance = USART2;
 487:Core/Src/main.c ****     huart2.Init.BaudRate     = 115200;
ARM GAS  /tmp/ccd0a1wf.s 			page 10


 488:Core/Src/main.c ****     huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 489:Core/Src/main.c ****     huart2.Init.StopBits     = UART_STOPBITS_1;
 490:Core/Src/main.c ****     huart2.Init.Parity       = UART_PARITY_NONE;
 491:Core/Src/main.c ****     huart2.Init.Mode         = UART_MODE_TX_RX;
 492:Core/Src/main.c ****     huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 493:Core/Src/main.c ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 494:Core/Src/main.c ****     if (HAL_UART_Init(&huart2) != HAL_OK) {
 495:Core/Src/main.c ****         Error_Handler();
 496:Core/Src/main.c ****     }
 497:Core/Src/main.c **** }
 498:Core/Src/main.c **** 
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** static void 
 501:Core/Src/main.c **** MX_DMA_Init(void) {
 502:Core/Src/main.c ****     __HAL_RCC_DMA1_CLK_ENABLE(); // Used by DAC
 503:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****     /* DMA1_Stream5_IRQn interrupt configuration (DAC) */
 506:Core/Src/main.c ****     HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 507:Core/Src/main.c ****     HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****     /* DMA2_Stream0_IRQn interrupt configuration (ADC1) */
 510:Core/Src/main.c ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 511:Core/Src/main.c ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****     /* DMA2_Stream2_IRQn interrupt configuration (ADC2) */
 514:Core/Src/main.c ****     HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 515:Core/Src/main.c ****     HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 516:Core/Src/main.c **** }
 517:Core/Src/main.c **** 
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** static void
 520:Core/Src/main.c **** MX_GPIO_Init(void) {
  28              		.loc 1 520 20 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              		.cfi_def_cfa_offset 56
 521:Core/Src/main.c ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 521 5 view .LVU1
  40              		.loc 1 521 22 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0594     		str	r4, [sp, #20]
  43 0008 0694     		str	r4, [sp, #24]
  44 000a 0794     		str	r4, [sp, #28]
  45 000c 0894     		str	r4, [sp, #32]
  46 000e 0994     		str	r4, [sp, #36]
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 523 5 is_stmt 1 view .LVU3
  48              	.LBB4:
ARM GAS  /tmp/ccd0a1wf.s 			page 11


  49              		.loc 1 523 5 view .LVU4
  50 0010 0194     		str	r4, [sp, #4]
  51              		.loc 1 523 5 view .LVU5
  52 0012 224B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00402 		orr	r2, r2, #4
  55 001a 1A63     		str	r2, [r3, #48]
  56              		.loc 1 523 5 view .LVU6
  57 001c 1A6B     		ldr	r2, [r3, #48]
  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0192     		str	r2, [sp, #4]
  60              		.loc 1 523 5 view .LVU7
  61 0024 019A     		ldr	r2, [sp, #4]
  62              	.LBE4:
  63              		.loc 1 523 5 view .LVU8
 524:Core/Src/main.c ****     __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 524 5 view .LVU9
  65              	.LBB5:
  66              		.loc 1 524 5 view .LVU10
  67 0026 0294     		str	r4, [sp, #8]
  68              		.loc 1 524 5 view .LVU11
  69 0028 1A6B     		ldr	r2, [r3, #48]
  70 002a 42F08002 		orr	r2, r2, #128
  71 002e 1A63     		str	r2, [r3, #48]
  72              		.loc 1 524 5 view .LVU12
  73 0030 1A6B     		ldr	r2, [r3, #48]
  74 0032 02F08002 		and	r2, r2, #128
  75 0036 0292     		str	r2, [sp, #8]
  76              		.loc 1 524 5 view .LVU13
  77 0038 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 524 5 view .LVU14
 525:Core/Src/main.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 525 5 view .LVU15
  81              	.LBB6:
  82              		.loc 1 525 5 view .LVU16
  83 003a 0394     		str	r4, [sp, #12]
  84              		.loc 1 525 5 view .LVU17
  85 003c 1A6B     		ldr	r2, [r3, #48]
  86 003e 42F00102 		orr	r2, r2, #1
  87 0042 1A63     		str	r2, [r3, #48]
  88              		.loc 1 525 5 view .LVU18
  89 0044 1A6B     		ldr	r2, [r3, #48]
  90 0046 02F00102 		and	r2, r2, #1
  91 004a 0392     		str	r2, [sp, #12]
  92              		.loc 1 525 5 view .LVU19
  93 004c 039A     		ldr	r2, [sp, #12]
  94              	.LBE6:
  95              		.loc 1 525 5 view .LVU20
 526:Core/Src/main.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  96              		.loc 1 526 5 view .LVU21
  97              	.LBB7:
  98              		.loc 1 526 5 view .LVU22
  99 004e 0494     		str	r4, [sp, #16]
 100              		.loc 1 526 5 view .LVU23
 101 0050 1A6B     		ldr	r2, [r3, #48]
 102 0052 42F00202 		orr	r2, r2, #2
ARM GAS  /tmp/ccd0a1wf.s 			page 12


 103 0056 1A63     		str	r2, [r3, #48]
 104              		.loc 1 526 5 view .LVU24
 105 0058 1B6B     		ldr	r3, [r3, #48]
 106 005a 03F00203 		and	r3, r3, #2
 107 005e 0493     		str	r3, [sp, #16]
 108              		.loc 1 526 5 view .LVU25
 109 0060 049B     		ldr	r3, [sp, #16]
 110              	.LBE7:
 111              		.loc 1 526 5 view .LVU26
 527:Core/Src/main.c **** 
 528:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 112              		.loc 1 528 5 view .LVU27
 113 0062 0F4D     		ldr	r5, .L3+4
 114 0064 2246     		mov	r2, r4
 115 0066 2021     		movs	r1, #32
 116 0068 2846     		mov	r0, r5
 117 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL0:
 529:Core/Src/main.c **** 
 530:Core/Src/main.c ****     GPIO_InitStruct.Pin  = B1_Pin;
 119              		.loc 1 530 5 view .LVU28
 120              		.loc 1 530 26 is_stmt 0 view .LVU29
 121 006e 4FF40053 		mov	r3, #8192
 122 0072 0593     		str	r3, [sp, #20]
 531:Core/Src/main.c ****     GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 123              		.loc 1 531 5 is_stmt 1 view .LVU30
 124              		.loc 1 531 26 is_stmt 0 view .LVU31
 125 0074 4FF40413 		mov	r3, #2162688
 126 0078 0693     		str	r3, [sp, #24]
 532:Core/Src/main.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 532 5 is_stmt 1 view .LVU32
 128              		.loc 1 532 26 is_stmt 0 view .LVU33
 129 007a 0794     		str	r4, [sp, #28]
 533:Core/Src/main.c ****     HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 130              		.loc 1 533 5 is_stmt 1 view .LVU34
 131 007c 05A9     		add	r1, sp, #20
 132 007e 0948     		ldr	r0, .L3+8
 133 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL1:
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****     GPIO_InitStruct.Pin   = LD2_Pin;
 135              		.loc 1 535 5 view .LVU35
 136              		.loc 1 535 27 is_stmt 0 view .LVU36
 137 0084 2023     		movs	r3, #32
 138 0086 0593     		str	r3, [sp, #20]
 536:Core/Src/main.c ****     GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 139              		.loc 1 536 5 is_stmt 1 view .LVU37
 140              		.loc 1 536 27 is_stmt 0 view .LVU38
 141 0088 0123     		movs	r3, #1
 142 008a 0693     		str	r3, [sp, #24]
 537:Core/Src/main.c ****     GPIO_InitStruct.Pull  = GPIO_NOPULL;
 143              		.loc 1 537 5 is_stmt 1 view .LVU39
 144              		.loc 1 537 27 is_stmt 0 view .LVU40
 145 008c 0794     		str	r4, [sp, #28]
 538:Core/Src/main.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 146              		.loc 1 538 5 is_stmt 1 view .LVU41
 147              		.loc 1 538 27 is_stmt 0 view .LVU42
ARM GAS  /tmp/ccd0a1wf.s 			page 13


 148 008e 0894     		str	r4, [sp, #32]
 539:Core/Src/main.c ****     HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 149              		.loc 1 539 5 is_stmt 1 view .LVU43
 150 0090 05A9     		add	r1, sp, #20
 151 0092 2846     		mov	r0, r5
 152 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 153              	.LVL2:
 540:Core/Src/main.c **** }
 154              		.loc 1 540 1 is_stmt 0 view .LVU44
 155 0098 0BB0     		add	sp, sp, #44
 156              		.cfi_def_cfa_offset 12
 157              		@ sp needed
 158 009a 30BD     		pop	{r4, r5, pc}
 159              	.L4:
 160              		.align	2
 161              	.L3:
 162 009c 00380240 		.word	1073887232
 163 00a0 00000240 		.word	1073872896
 164 00a4 00080240 		.word	1073874944
 165              		.cfi_endproc
 166              	.LFE248:
 168              		.section	.text.MX_DMA_Init,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	MX_DMA_Init:
 176              	.LFB247:
 501:Core/Src/main.c ****     __HAL_RCC_DMA1_CLK_ENABLE(); // Used by DAC
 177              		.loc 1 501 19 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 8
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181 0000 10B5     		push	{r4, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 4, -8
 184              		.cfi_offset 14, -4
 185 0002 82B0     		sub	sp, sp, #8
 186              		.cfi_def_cfa_offset 16
 502:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 187              		.loc 1 502 5 view .LVU46
 188              	.LBB8:
 502:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 189              		.loc 1 502 5 view .LVU47
 190 0004 0024     		movs	r4, #0
 191 0006 0094     		str	r4, [sp]
 502:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 192              		.loc 1 502 5 view .LVU48
 193 0008 164B     		ldr	r3, .L7
 194 000a 1A6B     		ldr	r2, [r3, #48]
 195 000c 42F40012 		orr	r2, r2, #2097152
 196 0010 1A63     		str	r2, [r3, #48]
 502:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 197              		.loc 1 502 5 view .LVU49
 198 0012 1A6B     		ldr	r2, [r3, #48]
 199 0014 02F40012 		and	r2, r2, #2097152
ARM GAS  /tmp/ccd0a1wf.s 			page 14


 200 0018 0092     		str	r2, [sp]
 502:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 201              		.loc 1 502 5 view .LVU50
 202 001a 009A     		ldr	r2, [sp]
 203              	.LBE8:
 502:Core/Src/main.c ****     __HAL_RCC_DMA2_CLK_ENABLE(); // Used by ADC1 & ADC2
 204              		.loc 1 502 5 view .LVU51
 503:Core/Src/main.c **** 
 205              		.loc 1 503 5 view .LVU52
 206              	.LBB9:
 503:Core/Src/main.c **** 
 207              		.loc 1 503 5 view .LVU53
 208 001c 0194     		str	r4, [sp, #4]
 503:Core/Src/main.c **** 
 209              		.loc 1 503 5 view .LVU54
 210 001e 1A6B     		ldr	r2, [r3, #48]
 211 0020 42F48002 		orr	r2, r2, #4194304
 212 0024 1A63     		str	r2, [r3, #48]
 503:Core/Src/main.c **** 
 213              		.loc 1 503 5 view .LVU55
 214 0026 1B6B     		ldr	r3, [r3, #48]
 215 0028 03F48003 		and	r3, r3, #4194304
 216 002c 0193     		str	r3, [sp, #4]
 503:Core/Src/main.c **** 
 217              		.loc 1 503 5 view .LVU56
 218 002e 019B     		ldr	r3, [sp, #4]
 219              	.LBE9:
 503:Core/Src/main.c **** 
 220              		.loc 1 503 5 view .LVU57
 506:Core/Src/main.c ****     HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 221              		.loc 1 506 5 view .LVU58
 222 0030 2246     		mov	r2, r4
 223 0032 2146     		mov	r1, r4
 224 0034 1020     		movs	r0, #16
 225 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 226              	.LVL3:
 507:Core/Src/main.c **** 
 227              		.loc 1 507 5 view .LVU59
 228 003a 1020     		movs	r0, #16
 229 003c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 230              	.LVL4:
 510:Core/Src/main.c ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 231              		.loc 1 510 5 view .LVU60
 232 0040 2246     		mov	r2, r4
 233 0042 2146     		mov	r1, r4
 234 0044 3820     		movs	r0, #56
 235 0046 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 236              	.LVL5:
 511:Core/Src/main.c **** 
 237              		.loc 1 511 5 view .LVU61
 238 004a 3820     		movs	r0, #56
 239 004c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 240              	.LVL6:
 514:Core/Src/main.c ****     HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 241              		.loc 1 514 5 view .LVU62
 242 0050 2246     		mov	r2, r4
 243 0052 2146     		mov	r1, r4
ARM GAS  /tmp/ccd0a1wf.s 			page 15


 244 0054 3C20     		movs	r0, #60
 245 0056 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 246              	.LVL7:
 515:Core/Src/main.c **** }
 247              		.loc 1 515 5 view .LVU63
 248 005a 3C20     		movs	r0, #60
 249 005c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 250              	.LVL8:
 516:Core/Src/main.c **** 
 251              		.loc 1 516 1 is_stmt 0 view .LVU64
 252 0060 02B0     		add	sp, sp, #8
 253              		.cfi_def_cfa_offset 8
 254              		@ sp needed
 255 0062 10BD     		pop	{r4, pc}
 256              	.L8:
 257              		.align	2
 258              	.L7:
 259 0064 00380240 		.word	1073887232
 260              		.cfi_endproc
 261              	.LFE247:
 263              		.section	.text.buildRamp,"ax",%progbits
 264              		.align	1
 265              		.global	buildRamp
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv4-sp-d16
 271              	buildRamp:
 272              	.LVL9:
 273              	.LFB238:
  58:Core/Src/main.c ****     float factor = (float)(max-min)/(float)np;
 274              		.loc 1 58 68 is_stmt 1 view -0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
  58:Core/Src/main.c ****     float factor = (float)(max-min)/(float)np;
 279              		.loc 1 58 68 is_stmt 0 view .LVU66
 280 0000 06EE901A 		vmov	s13, r1	@ int
  59:Core/Src/main.c ****     for(int16_t i=0; i<np; i++) {
 281              		.loc 1 59 5 is_stmt 1 view .LVU67
  59:Core/Src/main.c ****     for(int16_t i=0; i<np; i++) {
 282              		.loc 1 59 31 is_stmt 0 view .LVU68
 283 0004 521A     		subs	r2, r2, r1
 284              	.LVL10:
  59:Core/Src/main.c ****     for(int16_t i=0; i<np; i++) {
 285              		.loc 1 59 20 view .LVU69
 286 0006 07EE902A 		vmov	s15, r2	@ int
 287 000a F8EEE77A 		vcvt.f32.s32	s15, s15
  59:Core/Src/main.c ****     for(int16_t i=0; i<np; i++) {
 288              		.loc 1 59 37 view .LVU70
 289 000e 07EE100A 		vmov	s14, r0	@ int
 290 0012 B8EEC77A 		vcvt.f32.s32	s14, s14
  59:Core/Src/main.c ****     for(int16_t i=0; i<np; i++) {
 291              		.loc 1 59 11 view .LVU71
 292 0016 87EE876A 		vdiv.f32	s12, s15, s14
 293              	.LVL11:
ARM GAS  /tmp/ccd0a1wf.s 			page 16


  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 294              		.loc 1 60 5 is_stmt 1 view .LVU72
 295              	.LBB10:
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 296              		.loc 1 60 9 view .LVU73
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 297              		.loc 1 60 17 is_stmt 0 view .LVU74
 298 001a 0022     		movs	r2, #0
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 299              		.loc 1 60 5 view .LVU75
 300 001c 11E0     		b	.L10
 301              	.LVL12:
 302              	.L11:
  61:Core/Src/main.c ****     }
 303              		.loc 1 61 9 is_stmt 1 discriminator 3 view .LVU76
  61:Core/Src/main.c ****     }
 304              		.loc 1 61 41 is_stmt 0 discriminator 3 view .LVU77
 305 001e 07EE902A 		vmov	s15, r2	@ int
 306 0022 F8EEE77A 		vcvt.f32.s32	s15, s15
 307 0026 27EE867A 		vmul.f32	s14, s15, s12
  61:Core/Src/main.c ****     }
 308              		.loc 1 61 34 discriminator 3 view .LVU78
 309 002a F8EEE67A 		vcvt.f32.s32	s15, s13
 310 002e 77EE877A 		vadd.f32	s15, s15, s14
  61:Core/Src/main.c ****     }
 311              		.loc 1 61 20 discriminator 3 view .LVU79
 312 0032 FCEEE77A 		vcvt.u32.f32	s15, s15
  61:Core/Src/main.c ****     }
 313              		.loc 1 61 18 discriminator 3 view .LVU80
 314 0036 17EE901A 		vmov	r1, s15	@ int
 315 003a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 316              		.loc 1 60 28 is_stmt 1 discriminator 3 view .LVU81
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 317              		.loc 1 60 29 is_stmt 0 discriminator 3 view .LVU82
 318 003e 0132     		adds	r2, r2, #1
 319              	.LVL13:
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 320              		.loc 1 60 29 discriminator 3 view .LVU83
 321 0040 12B2     		sxth	r2, r2
 322              	.LVL14:
 323              	.L10:
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 324              		.loc 1 60 22 is_stmt 1 discriminator 1 view .LVU84
  60:Core/Src/main.c ****         pRamp[i] = (uint16_t)(min+factor*i);
 325              		.loc 1 60 5 is_stmt 0 discriminator 1 view .LVU85
 326 0042 8242     		cmp	r2, r0
 327 0044 EBDB     		blt	.L11
 328              	.LBE10:
  63:Core/Src/main.c **** 
 329              		.loc 1 63 1 view .LVU86
 330 0046 7047     		bx	lr
 331              		.cfi_endproc
 332              	.LFE238:
 334              		.section	.text.Error_Handler,"ax",%progbits
 335              		.align	1
 336              		.global	Error_Handler
ARM GAS  /tmp/ccd0a1wf.s 			page 17


 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.fpu fpv4-sp-d16
 342              	Error_Handler:
 343              	.LFB249:
 541:Core/Src/main.c **** 
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** void 
 544:Core/Src/main.c **** Error_Handler(void) {
 344              		.loc 1 544 21 is_stmt 1 view -0
 345              		.cfi_startproc
 346              		@ Volatile: function does not return.
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 545:Core/Src/main.c ****     __disable_irq();
 350              		.loc 1 545 5 view .LVU88
 351              	.LBB11:
 352              	.LBI11:
 353              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  /tmp/ccd0a1wf.s 			page 18


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccd0a1wf.s 			page 19


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 354              		.loc 2 140 27 view .LVU89
 355              	.LBB12:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 356              		.loc 2 142 3 view .LVU90
 357              		.syntax unified
 358              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 359 0000 72B6     		cpsid i
 360              	@ 0 "" 2
 361              		.thumb
ARM GAS  /tmp/ccd0a1wf.s 			page 20


 362              		.syntax unified
 363              	.L13:
 364              	.LBE12:
 365              	.LBE11:
 546:Core/Src/main.c ****     while (1) {
 366              		.loc 1 546 5 discriminator 1 view .LVU91
 547:Core/Src/main.c ****     }
 367              		.loc 1 547 5 discriminator 1 view .LVU92
 546:Core/Src/main.c ****     while (1) {
 368              		.loc 1 546 11 discriminator 1 view .LVU93
 369 0002 FEE7     		b	.L13
 370              		.cfi_endproc
 371              	.LFE249:
 373              		.section	.text.MX_ADC1_Init,"ax",%progbits
 374              		.align	1
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv4-sp-d16
 380              	MX_ADC1_Init:
 381              	.LFB242:
 341:Core/Src/main.c ****     ADC_ChannelConfTypeDef sConfig = {0};
 382              		.loc 1 341 20 view -0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 16
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386 0000 00B5     		push	{lr}
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 14, -4
 389 0002 85B0     		sub	sp, sp, #20
 390              		.cfi_def_cfa_offset 24
 342:Core/Src/main.c **** 
 391              		.loc 1 342 5 view .LVU95
 342:Core/Src/main.c **** 
 392              		.loc 1 342 28 is_stmt 0 view .LVU96
 393 0004 0023     		movs	r3, #0
 394 0006 0093     		str	r3, [sp]
 395 0008 0193     		str	r3, [sp, #4]
 396 000a 0293     		str	r3, [sp, #8]
 397 000c 0393     		str	r3, [sp, #12]
 344:Core/Src/main.c ****     hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 398              		.loc 1 344 5 is_stmt 1 view .LVU97
 344:Core/Src/main.c ****     hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 399              		.loc 1 344 20 is_stmt 0 view .LVU98
 400 000e 1648     		ldr	r0, .L20
 401 0010 164A     		ldr	r2, .L20+4
 402 0012 0260     		str	r2, [r0]
 345:Core/Src/main.c ****     hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 403              		.loc 1 345 5 is_stmt 1 view .LVU99
 345:Core/Src/main.c ****     hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 404              		.loc 1 345 38 is_stmt 0 view .LVU100
 405 0014 4FF48032 		mov	r2, #65536
 406 0018 4260     		str	r2, [r0, #4]
 346:Core/Src/main.c ****     hadc1.Init.ScanConvMode          = DISABLE;
 407              		.loc 1 346 5 is_stmt 1 view .LVU101
 346:Core/Src/main.c ****     hadc1.Init.ScanConvMode          = DISABLE;
 408              		.loc 1 346 38 is_stmt 0 view .LVU102
ARM GAS  /tmp/ccd0a1wf.s 			page 21


 409 001a 8360     		str	r3, [r0, #8]
 347:Core/Src/main.c ****     hadc1.Init.ContinuousConvMode    = DISABLE;
 410              		.loc 1 347 5 is_stmt 1 view .LVU103
 347:Core/Src/main.c ****     hadc1.Init.ContinuousConvMode    = DISABLE;
 411              		.loc 1 347 38 is_stmt 0 view .LVU104
 412 001c 0361     		str	r3, [r0, #16]
 348:Core/Src/main.c ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 413              		.loc 1 348 5 is_stmt 1 view .LVU105
 348:Core/Src/main.c ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 414              		.loc 1 348 38 is_stmt 0 view .LVU106
 415 001e 0376     		strb	r3, [r0, #24]
 349:Core/Src/main.c ****     hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 416              		.loc 1 349 5 is_stmt 1 view .LVU107
 349:Core/Src/main.c ****     hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 417              		.loc 1 349 38 is_stmt 0 view .LVU108
 418 0020 80F82030 		strb	r3, [r0, #32]
 350:Core/Src/main.c ****     hadc1.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T2_TRGO;
 419              		.loc 1 350 5 is_stmt 1 view .LVU109
 350:Core/Src/main.c ****     hadc1.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T2_TRGO;
 420              		.loc 1 350 38 is_stmt 0 view .LVU110
 421 0024 4FF08052 		mov	r2, #268435456
 422 0028 C262     		str	r2, [r0, #44]
 351:Core/Src/main.c ****     hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 423              		.loc 1 351 5 is_stmt 1 view .LVU111
 351:Core/Src/main.c ****     hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 424              		.loc 1 351 38 is_stmt 0 view .LVU112
 425 002a 4FF0C062 		mov	r2, #100663296
 426 002e 8262     		str	r2, [r0, #40]
 352:Core/Src/main.c ****     hadc1.Init.NbrOfConversion       = 1;
 427              		.loc 1 352 5 is_stmt 1 view .LVU113
 352:Core/Src/main.c ****     hadc1.Init.NbrOfConversion       = 1;
 428              		.loc 1 352 38 is_stmt 0 view .LVU114
 429 0030 C360     		str	r3, [r0, #12]
 353:Core/Src/main.c ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 430              		.loc 1 353 5 is_stmt 1 view .LVU115
 353:Core/Src/main.c ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 431              		.loc 1 353 38 is_stmt 0 view .LVU116
 432 0032 0123     		movs	r3, #1
 433 0034 C361     		str	r3, [r0, #28]
 354:Core/Src/main.c ****     hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 434              		.loc 1 354 5 is_stmt 1 view .LVU117
 354:Core/Src/main.c ****     hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 435              		.loc 1 354 38 is_stmt 0 view .LVU118
 436 0036 80F83030 		strb	r3, [r0, #48]
 355:Core/Src/main.c ****     if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 437              		.loc 1 355 5 is_stmt 1 view .LVU119
 355:Core/Src/main.c ****     if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 438              		.loc 1 355 38 is_stmt 0 view .LVU120
 439 003a 4361     		str	r3, [r0, #20]
 356:Core/Src/main.c ****         Error_Handler();
 440              		.loc 1 356 5 is_stmt 1 view .LVU121
 356:Core/Src/main.c ****         Error_Handler();
 441              		.loc 1 356 9 is_stmt 0 view .LVU122
 442 003c FFF7FEFF 		bl	HAL_ADC_Init
 443              	.LVL15:
 356:Core/Src/main.c ****         Error_Handler();
 444              		.loc 1 356 8 view .LVU123
ARM GAS  /tmp/ccd0a1wf.s 			page 22


 445 0040 68B9     		cbnz	r0, .L18
 361:Core/Src/main.c ****     sConfig.Rank         = 1;
 446              		.loc 1 361 5 is_stmt 1 view .LVU124
 361:Core/Src/main.c ****     sConfig.Rank         = 1;
 447              		.loc 1 361 26 is_stmt 0 view .LVU125
 448 0042 0023     		movs	r3, #0
 449 0044 0093     		str	r3, [sp]
 362:Core/Src/main.c ****     sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;//ADC_SAMPLETIME_3CYCLES;
 450              		.loc 1 362 5 is_stmt 1 view .LVU126
 362:Core/Src/main.c ****     sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;//ADC_SAMPLETIME_3CYCLES;
 451              		.loc 1 362 26 is_stmt 0 view .LVU127
 452 0046 0123     		movs	r3, #1
 453 0048 0193     		str	r3, [sp, #4]
 363:Core/Src/main.c ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 454              		.loc 1 363 5 is_stmt 1 view .LVU128
 363:Core/Src/main.c ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 455              		.loc 1 363 26 is_stmt 0 view .LVU129
 456 004a 0223     		movs	r3, #2
 457 004c 0293     		str	r3, [sp, #8]
 364:Core/Src/main.c ****         Error_Handler();
 458              		.loc 1 364 5 is_stmt 1 view .LVU130
 364:Core/Src/main.c ****         Error_Handler();
 459              		.loc 1 364 9 is_stmt 0 view .LVU131
 460 004e 6946     		mov	r1, sp
 461 0050 0548     		ldr	r0, .L20
 462 0052 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 463              	.LVL16:
 364:Core/Src/main.c ****         Error_Handler();
 464              		.loc 1 364 8 view .LVU132
 465 0056 20B9     		cbnz	r0, .L19
 367:Core/Src/main.c **** 
 466              		.loc 1 367 1 view .LVU133
 467 0058 05B0     		add	sp, sp, #20
 468              		.cfi_remember_state
 469              		.cfi_def_cfa_offset 4
 470              		@ sp needed
 471 005a 5DF804FB 		ldr	pc, [sp], #4
 472              	.L18:
 473              		.cfi_restore_state
 357:Core/Src/main.c ****     }
 474              		.loc 1 357 9 is_stmt 1 view .LVU134
 475 005e FFF7FEFF 		bl	Error_Handler
 476              	.LVL17:
 477              	.L19:
 365:Core/Src/main.c ****     }
 478              		.loc 1 365 9 view .LVU135
 479 0062 FFF7FEFF 		bl	Error_Handler
 480              	.LVL18:
 481              	.L21:
 482 0066 00BF     		.align	2
 483              	.L20:
 484 0068 00000000 		.word	.LANCHOR0
 485 006c 00200140 		.word	1073815552
 486              		.cfi_endproc
 487              	.LFE242:
 489              		.section	.text.MX_ADC2_Init,"ax",%progbits
 490              		.align	1
ARM GAS  /tmp/ccd0a1wf.s 			page 23


 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 494              		.fpu fpv4-sp-d16
 496              	MX_ADC2_Init:
 497              	.LFB243:
 376:Core/Src/main.c **** 
 498              		.loc 1 376 20 view -0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 16
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502 0000 00B5     		push	{lr}
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 14, -4
 505 0002 85B0     		sub	sp, sp, #20
 506              		.cfi_def_cfa_offset 24
 381:Core/Src/main.c **** 
 507              		.loc 1 381 3 view .LVU137
 381:Core/Src/main.c **** 
 508              		.loc 1 381 26 is_stmt 0 view .LVU138
 509 0004 0023     		movs	r3, #0
 510 0006 0093     		str	r3, [sp]
 511 0008 0193     		str	r3, [sp, #4]
 512 000a 0293     		str	r3, [sp, #8]
 513 000c 0393     		str	r3, [sp, #12]
 388:Core/Src/main.c ****   hadc2.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 514              		.loc 1 388 3 is_stmt 1 view .LVU139
 388:Core/Src/main.c ****   hadc2.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 515              		.loc 1 388 18 is_stmt 0 view .LVU140
 516 000e 1B48     		ldr	r0, .L30
 517 0010 1B4A     		ldr	r2, .L30+4
 518 0012 0260     		str	r2, [r0]
 389:Core/Src/main.c ****   hadc2.Init.Resolution            = ADC_RESOLUTION_12B;
 519              		.loc 1 389 3 is_stmt 1 view .LVU141
 389:Core/Src/main.c ****   hadc2.Init.Resolution            = ADC_RESOLUTION_12B;
 520              		.loc 1 389 36 is_stmt 0 view .LVU142
 521 0014 4FF48032 		mov	r2, #65536
 522 0018 4260     		str	r2, [r0, #4]
 390:Core/Src/main.c ****   hadc2.Init.ScanConvMode          = ENABLE;
 523              		.loc 1 390 3 is_stmt 1 view .LVU143
 390:Core/Src/main.c ****   hadc2.Init.ScanConvMode          = ENABLE;
 524              		.loc 1 390 36 is_stmt 0 view .LVU144
 525 001a 8360     		str	r3, [r0, #8]
 391:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode    = DISABLE;
 526              		.loc 1 391 3 is_stmt 1 view .LVU145
 391:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode    = DISABLE;
 527              		.loc 1 391 36 is_stmt 0 view .LVU146
 528 001c 0122     		movs	r2, #1
 529 001e 0261     		str	r2, [r0, #16]
 392:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 530              		.loc 1 392 3 is_stmt 1 view .LVU147
 392:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 531              		.loc 1 392 36 is_stmt 0 view .LVU148
 532 0020 0376     		strb	r3, [r0, #24]
 393:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 533              		.loc 1 393 3 is_stmt 1 view .LVU149
 393:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
ARM GAS  /tmp/ccd0a1wf.s 			page 24


 534              		.loc 1 393 36 is_stmt 0 view .LVU150
 535 0022 80F82030 		strb	r3, [r0, #32]
 394:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 536              		.loc 1 394 3 is_stmt 1 view .LVU151
 394:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 537              		.loc 1 394 36 is_stmt 0 view .LVU152
 538 0026 C362     		str	r3, [r0, #44]
 395:Core/Src/main.c ****   hadc2.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 539              		.loc 1 395 3 is_stmt 1 view .LVU153
 395:Core/Src/main.c ****   hadc2.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 540              		.loc 1 395 36 is_stmt 0 view .LVU154
 541 0028 02F17062 		add	r2, r2, #251658240
 542 002c 8262     		str	r2, [r0, #40]
 396:Core/Src/main.c ****   hadc2.Init.NbrOfConversion       = 2;
 543              		.loc 1 396 3 is_stmt 1 view .LVU155
 396:Core/Src/main.c ****   hadc2.Init.NbrOfConversion       = 2;
 544              		.loc 1 396 36 is_stmt 0 view .LVU156
 545 002e C360     		str	r3, [r0, #12]
 397:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 546              		.loc 1 397 3 is_stmt 1 view .LVU157
 397:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 547              		.loc 1 397 36 is_stmt 0 view .LVU158
 548 0030 0222     		movs	r2, #2
 549 0032 C261     		str	r2, [r0, #28]
 398:Core/Src/main.c ****   hadc2.Init.EOCSelection          = ADC_EOC_SEQ_CONV;
 550              		.loc 1 398 3 is_stmt 1 view .LVU159
 398:Core/Src/main.c ****   hadc2.Init.EOCSelection          = ADC_EOC_SEQ_CONV;
 551              		.loc 1 398 36 is_stmt 0 view .LVU160
 552 0034 80F83030 		strb	r3, [r0, #48]
 399:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 553              		.loc 1 399 3 is_stmt 1 view .LVU161
 399:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 554              		.loc 1 399 36 is_stmt 0 view .LVU162
 555 0038 4361     		str	r3, [r0, #20]
 400:Core/Src/main.c ****       Error_Handler();
 556              		.loc 1 400 3 is_stmt 1 view .LVU163
 400:Core/Src/main.c ****       Error_Handler();
 557              		.loc 1 400 7 is_stmt 0 view .LVU164
 558 003a FFF7FEFF 		bl	HAL_ADC_Init
 559              	.LVL19:
 400:Core/Src/main.c ****       Error_Handler();
 560              		.loc 1 400 6 view .LVU165
 561 003e B0B9     		cbnz	r0, .L27
 406:Core/Src/main.c ****   sConfig.Rank         = 1;
 562              		.loc 1 406 3 is_stmt 1 view .LVU166
 406:Core/Src/main.c ****   sConfig.Rank         = 1;
 563              		.loc 1 406 24 is_stmt 0 view .LVU167
 564 0040 0E23     		movs	r3, #14
 565 0042 0093     		str	r3, [sp]
 407:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 566              		.loc 1 407 3 is_stmt 1 view .LVU168
 407:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 567              		.loc 1 407 24 is_stmt 0 view .LVU169
 568 0044 0123     		movs	r3, #1
 569 0046 0193     		str	r3, [sp, #4]
 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 570              		.loc 1 408 3 is_stmt 1 view .LVU170
ARM GAS  /tmp/ccd0a1wf.s 			page 25


 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 571              		.loc 1 408 24 is_stmt 0 view .LVU171
 572 0048 0023     		movs	r3, #0
 573 004a 0293     		str	r3, [sp, #8]
 409:Core/Src/main.c ****       Error_Handler();
 574              		.loc 1 409 3 is_stmt 1 view .LVU172
 409:Core/Src/main.c ****       Error_Handler();
 575              		.loc 1 409 7 is_stmt 0 view .LVU173
 576 004c 6946     		mov	r1, sp
 577 004e 0B48     		ldr	r0, .L30
 578 0050 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 579              	.LVL20:
 409:Core/Src/main.c ****       Error_Handler();
 580              		.loc 1 409 6 view .LVU174
 581 0054 68B9     		cbnz	r0, .L28
 412:Core/Src/main.c ****   sConfig.Rank         = 2;
 582              		.loc 1 412 3 is_stmt 1 view .LVU175
 412:Core/Src/main.c ****   sConfig.Rank         = 2;
 583              		.loc 1 412 24 is_stmt 0 view .LVU176
 584 0056 0F23     		movs	r3, #15
 585 0058 0093     		str	r3, [sp]
 413:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 586              		.loc 1 413 3 is_stmt 1 view .LVU177
 413:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 587              		.loc 1 413 24 is_stmt 0 view .LVU178
 588 005a 0223     		movs	r3, #2
 589 005c 0193     		str	r3, [sp, #4]
 414:Core/Src/main.c ****       Error_Handler();
 590              		.loc 1 414 3 is_stmt 1 view .LVU179
 414:Core/Src/main.c ****       Error_Handler();
 591              		.loc 1 414 7 is_stmt 0 view .LVU180
 592 005e 6946     		mov	r1, sp
 593 0060 0648     		ldr	r0, .L30
 594 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 595              	.LVL21:
 414:Core/Src/main.c ****       Error_Handler();
 596              		.loc 1 414 6 view .LVU181
 597 0066 30B9     		cbnz	r0, .L29
 417:Core/Src/main.c **** 
 598              		.loc 1 417 1 view .LVU182
 599 0068 05B0     		add	sp, sp, #20
 600              		.cfi_remember_state
 601              		.cfi_def_cfa_offset 4
 602              		@ sp needed
 603 006a 5DF804FB 		ldr	pc, [sp], #4
 604              	.L27:
 605              		.cfi_restore_state
 401:Core/Src/main.c ****   }
 606              		.loc 1 401 7 is_stmt 1 view .LVU183
 607 006e FFF7FEFF 		bl	Error_Handler
 608              	.LVL22:
 609              	.L28:
 410:Core/Src/main.c ****   }
 610              		.loc 1 410 7 view .LVU184
 611 0072 FFF7FEFF 		bl	Error_Handler
 612              	.LVL23:
 613              	.L29:
ARM GAS  /tmp/ccd0a1wf.s 			page 26


 415:Core/Src/main.c ****   }
 614              		.loc 1 415 7 view .LVU185
 615 0076 FFF7FEFF 		bl	Error_Handler
 616              	.LVL24:
 617              	.L31:
 618 007a 00BF     		.align	2
 619              	.L30:
 620 007c 00000000 		.word	.LANCHOR1
 621 0080 00210140 		.word	1073815808
 622              		.cfi_endproc
 623              	.LFE243:
 625              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 626              		.align	1
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 630              		.fpu fpv4-sp-d16
 632              	MX_USART2_UART_Init:
 633              	.LFB246:
 485:Core/Src/main.c ****     huart2.Instance = USART2;
 634              		.loc 1 485 27 view -0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638 0000 08B5     		push	{r3, lr}
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 3, -8
 641              		.cfi_offset 14, -4
 486:Core/Src/main.c ****     huart2.Init.BaudRate     = 115200;
 642              		.loc 1 486 5 view .LVU187
 486:Core/Src/main.c ****     huart2.Init.BaudRate     = 115200;
 643              		.loc 1 486 21 is_stmt 0 view .LVU188
 644 0002 0A48     		ldr	r0, .L36
 645 0004 0A4B     		ldr	r3, .L36+4
 646 0006 0360     		str	r3, [r0]
 487:Core/Src/main.c ****     huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 647              		.loc 1 487 5 is_stmt 1 view .LVU189
 487:Core/Src/main.c ****     huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 648              		.loc 1 487 30 is_stmt 0 view .LVU190
 649 0008 4FF4E133 		mov	r3, #115200
 650 000c 4360     		str	r3, [r0, #4]
 488:Core/Src/main.c ****     huart2.Init.StopBits     = UART_STOPBITS_1;
 651              		.loc 1 488 5 is_stmt 1 view .LVU191
 488:Core/Src/main.c ****     huart2.Init.StopBits     = UART_STOPBITS_1;
 652              		.loc 1 488 30 is_stmt 0 view .LVU192
 653 000e 0023     		movs	r3, #0
 654 0010 8360     		str	r3, [r0, #8]
 489:Core/Src/main.c ****     huart2.Init.Parity       = UART_PARITY_NONE;
 655              		.loc 1 489 5 is_stmt 1 view .LVU193
 489:Core/Src/main.c ****     huart2.Init.Parity       = UART_PARITY_NONE;
 656              		.loc 1 489 30 is_stmt 0 view .LVU194
 657 0012 C360     		str	r3, [r0, #12]
 490:Core/Src/main.c ****     huart2.Init.Mode         = UART_MODE_TX_RX;
 658              		.loc 1 490 5 is_stmt 1 view .LVU195
 490:Core/Src/main.c ****     huart2.Init.Mode         = UART_MODE_TX_RX;
 659              		.loc 1 490 30 is_stmt 0 view .LVU196
 660 0014 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/ccd0a1wf.s 			page 27


 491:Core/Src/main.c ****     huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 661              		.loc 1 491 5 is_stmt 1 view .LVU197
 491:Core/Src/main.c ****     huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 662              		.loc 1 491 30 is_stmt 0 view .LVU198
 663 0016 0C22     		movs	r2, #12
 664 0018 4261     		str	r2, [r0, #20]
 492:Core/Src/main.c ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 665              		.loc 1 492 5 is_stmt 1 view .LVU199
 492:Core/Src/main.c ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 666              		.loc 1 492 30 is_stmt 0 view .LVU200
 667 001a 8361     		str	r3, [r0, #24]
 493:Core/Src/main.c ****     if (HAL_UART_Init(&huart2) != HAL_OK) {
 668              		.loc 1 493 5 is_stmt 1 view .LVU201
 493:Core/Src/main.c ****     if (HAL_UART_Init(&huart2) != HAL_OK) {
 669              		.loc 1 493 30 is_stmt 0 view .LVU202
 670 001c C361     		str	r3, [r0, #28]
 494:Core/Src/main.c ****         Error_Handler();
 671              		.loc 1 494 5 is_stmt 1 view .LVU203
 494:Core/Src/main.c ****         Error_Handler();
 672              		.loc 1 494 9 is_stmt 0 view .LVU204
 673 001e FFF7FEFF 		bl	HAL_UART_Init
 674              	.LVL25:
 494:Core/Src/main.c ****         Error_Handler();
 675              		.loc 1 494 8 view .LVU205
 676 0022 00B9     		cbnz	r0, .L35
 497:Core/Src/main.c **** 
 677              		.loc 1 497 1 view .LVU206
 678 0024 08BD     		pop	{r3, pc}
 679              	.L35:
 495:Core/Src/main.c ****     }
 680              		.loc 1 495 9 is_stmt 1 view .LVU207
 681 0026 FFF7FEFF 		bl	Error_Handler
 682              	.LVL26:
 683              	.L37:
 684 002a 00BF     		.align	2
 685              	.L36:
 686 002c 00000000 		.word	.LANCHOR2
 687 0030 00440040 		.word	1073759232
 688              		.cfi_endproc
 689              	.LFE246:
 691              		.section	.text.MX_DAC_Init,"ax",%progbits
 692              		.align	1
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 696              		.fpu fpv4-sp-d16
 698              	MX_DAC_Init:
 699              	.LFB244:
 421:Core/Src/main.c ****     DAC_ChannelConfTypeDef sConfig = {0};
 700              		.loc 1 421 19 view -0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 8
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704 0000 00B5     		push	{lr}
 705              		.cfi_def_cfa_offset 4
 706              		.cfi_offset 14, -4
 707 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccd0a1wf.s 			page 28


 708              		.cfi_def_cfa_offset 16
 422:Core/Src/main.c ****     hdac.Instance = DAC;
 709              		.loc 1 422 5 view .LVU209
 422:Core/Src/main.c ****     hdac.Instance = DAC;
 710              		.loc 1 422 28 is_stmt 0 view .LVU210
 711 0004 0023     		movs	r3, #0
 712 0006 0093     		str	r3, [sp]
 713 0008 0193     		str	r3, [sp, #4]
 423:Core/Src/main.c ****     if (HAL_DAC_Init(&hdac) != HAL_OK) {
 714              		.loc 1 423 5 is_stmt 1 view .LVU211
 423:Core/Src/main.c ****     if (HAL_DAC_Init(&hdac) != HAL_OK) {
 715              		.loc 1 423 19 is_stmt 0 view .LVU212
 716 000a 0B48     		ldr	r0, .L44
 717 000c 0B4B     		ldr	r3, .L44+4
 718 000e 0360     		str	r3, [r0]
 424:Core/Src/main.c ****         Error_Handler();
 719              		.loc 1 424 5 is_stmt 1 view .LVU213
 424:Core/Src/main.c ****         Error_Handler();
 720              		.loc 1 424 9 is_stmt 0 view .LVU214
 721 0010 FFF7FEFF 		bl	HAL_DAC_Init
 722              	.LVL27:
 424:Core/Src/main.c ****         Error_Handler();
 723              		.loc 1 424 8 view .LVU215
 724 0014 58B9     		cbnz	r0, .L42
 427:Core/Src/main.c ****     #ifdef DAC_BUFFERED
 725              		.loc 1 427 5 is_stmt 1 view .LVU216
 427:Core/Src/main.c ****     #ifdef DAC_BUFFERED
 726              		.loc 1 427 34 is_stmt 0 view .LVU217
 727 0016 2423     		movs	r3, #36
 728 0018 0093     		str	r3, [sp]
 429:Core/Src/main.c ****     #else
 729              		.loc 1 429 9 is_stmt 1 view .LVU218
 429:Core/Src/main.c ****     #else
 730              		.loc 1 429 34 is_stmt 0 view .LVU219
 731 001a 0022     		movs	r2, #0
 732 001c 0192     		str	r2, [sp, #4]
 433:Core/Src/main.c ****         Error_Handler();
 733              		.loc 1 433 5 is_stmt 1 view .LVU220
 433:Core/Src/main.c ****         Error_Handler();
 734              		.loc 1 433 9 is_stmt 0 view .LVU221
 735 001e 6946     		mov	r1, sp
 736 0020 0548     		ldr	r0, .L44
 737 0022 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 738              	.LVL28:
 433:Core/Src/main.c ****         Error_Handler();
 739              		.loc 1 433 8 view .LVU222
 740 0026 20B9     		cbnz	r0, .L43
 436:Core/Src/main.c **** 
 741              		.loc 1 436 1 view .LVU223
 742 0028 03B0     		add	sp, sp, #12
 743              		.cfi_remember_state
 744              		.cfi_def_cfa_offset 4
 745              		@ sp needed
 746 002a 5DF804FB 		ldr	pc, [sp], #4
 747              	.L42:
 748              		.cfi_restore_state
 425:Core/Src/main.c ****     }
ARM GAS  /tmp/ccd0a1wf.s 			page 29


 749              		.loc 1 425 9 is_stmt 1 view .LVU224
 750 002e FFF7FEFF 		bl	Error_Handler
 751              	.LVL29:
 752              	.L43:
 434:Core/Src/main.c ****     }
 753              		.loc 1 434 9 view .LVU225
 754 0032 FFF7FEFF 		bl	Error_Handler
 755              	.LVL30:
 756              	.L45:
 757 0036 00BF     		.align	2
 758              	.L44:
 759 0038 00000000 		.word	.LANCHOR3
 760 003c 00740040 		.word	1073771520
 761              		.cfi_endproc
 762              	.LFE244:
 764              		.section	.text.MX_TIM2_Init,"ax",%progbits
 765              		.align	1
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 769              		.fpu fpv4-sp-d16
 771              	MX_TIM2_Init:
 772              	.LFB245:
 440:Core/Src/main.c ****     uint32_t periodValue = (uint32_t)((SystemCoreClock)/(RAMP_FREQUENCY*NS));
 773              		.loc 1 440 20 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 56
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777 0000 00B5     		push	{lr}
 778              		.cfi_def_cfa_offset 4
 779              		.cfi_offset 14, -4
 780 0002 8FB0     		sub	sp, sp, #60
 781              		.cfi_def_cfa_offset 64
 441:Core/Src/main.c ****     if(periodValue < 2) {
 782              		.loc 1 441 5 view .LVU227
 441:Core/Src/main.c ****     if(periodValue < 2) {
 783              		.loc 1 441 28 is_stmt 0 view .LVU228
 784 0004 264B     		ldr	r3, .L58
 785 0006 1A68     		ldr	r2, [r3]
 441:Core/Src/main.c ****     if(periodValue < 2) {
 786              		.loc 1 441 14 view .LVU229
 787 0008 264B     		ldr	r3, .L58+4
 788 000a A3FB0213 		umull	r1, r3, r3, r2
 789              	.LVL31:
 442:Core/Src/main.c ****         Error_Handler();
 790              		.loc 1 442 5 is_stmt 1 view .LVU230
 442:Core/Src/main.c ****         Error_Handler();
 791              		.loc 1 442 7 is_stmt 0 view .LVU231
 792 000e B2F5203F 		cmp	r2, #163840
 793 0012 3AD3     		bcc	.L53
 794 0014 1B0C     		lsrs	r3, r3, #16
 795              	.LVL32:
 445:Core/Src/main.c ****     uint32_t prescalerValue = 0;
 796              		.loc 1 445 5 is_stmt 1 view .LVU232
 445:Core/Src/main.c ****     uint32_t prescalerValue = 0;
 797              		.loc 1 445 17 is_stmt 0 view .LVU233
 798 0016 5A1E     		subs	r2, r3, #1
ARM GAS  /tmp/ccd0a1wf.s 			page 30


 799              	.LVL33:
 446:Core/Src/main.c **** 
 800              		.loc 1 446 5 is_stmt 1 view .LVU234
 448:Core/Src/main.c ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 801              		.loc 1 448 5 view .LVU235
 448:Core/Src/main.c ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 802              		.loc 1 448 28 is_stmt 0 view .LVU236
 803 0018 0023     		movs	r3, #0
 804 001a 0A93     		str	r3, [sp, #40]
 805 001c 0B93     		str	r3, [sp, #44]
 806 001e 0C93     		str	r3, [sp, #48]
 807 0020 0D93     		str	r3, [sp, #52]
 449:Core/Src/main.c ****     TIM_OC_InitTypeDef sConfigOC = {0};
 808              		.loc 1 449 5 is_stmt 1 view .LVU237
 449:Core/Src/main.c ****     TIM_OC_InitTypeDef sConfigOC = {0};
 809              		.loc 1 449 29 is_stmt 0 view .LVU238
 810 0022 0893     		str	r3, [sp, #32]
 811 0024 0993     		str	r3, [sp, #36]
 450:Core/Src/main.c **** 
 812              		.loc 1 450 5 is_stmt 1 view .LVU239
 450:Core/Src/main.c **** 
 813              		.loc 1 450 24 is_stmt 0 view .LVU240
 814 0026 0193     		str	r3, [sp, #4]
 815 0028 0293     		str	r3, [sp, #8]
 816 002a 0393     		str	r3, [sp, #12]
 817 002c 0493     		str	r3, [sp, #16]
 818 002e 0593     		str	r3, [sp, #20]
 819 0030 0693     		str	r3, [sp, #24]
 820 0032 0793     		str	r3, [sp, #28]
 452:Core/Src/main.c ****     htim2.Init.Prescaler         = prescalerValue;
 821              		.loc 1 452 5 is_stmt 1 view .LVU241
 452:Core/Src/main.c ****     htim2.Init.Prescaler         = prescalerValue;
 822              		.loc 1 452 20 is_stmt 0 view .LVU242
 823 0034 1C48     		ldr	r0, .L58+8
 824 0036 4FF08041 		mov	r1, #1073741824
 825 003a 0160     		str	r1, [r0]
 453:Core/Src/main.c ****     htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 826              		.loc 1 453 5 is_stmt 1 view .LVU243
 453:Core/Src/main.c ****     htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 827              		.loc 1 453 34 is_stmt 0 view .LVU244
 828 003c 4360     		str	r3, [r0, #4]
 454:Core/Src/main.c ****     htim2.Init.Period            = periodValue;
 829              		.loc 1 454 5 is_stmt 1 view .LVU245
 454:Core/Src/main.c ****     htim2.Init.Period            = periodValue;
 830              		.loc 1 454 34 is_stmt 0 view .LVU246
 831 003e 8360     		str	r3, [r0, #8]
 455:Core/Src/main.c ****     htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 832              		.loc 1 455 5 is_stmt 1 view .LVU247
 455:Core/Src/main.c ****     htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 833              		.loc 1 455 34 is_stmt 0 view .LVU248
 834 0040 C260     		str	r2, [r0, #12]
 456:Core/Src/main.c ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 835              		.loc 1 456 5 is_stmt 1 view .LVU249
 456:Core/Src/main.c ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 836              		.loc 1 456 34 is_stmt 0 view .LVU250
 837 0042 0361     		str	r3, [r0, #16]
 457:Core/Src/main.c ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
ARM GAS  /tmp/ccd0a1wf.s 			page 31


 838              		.loc 1 457 5 is_stmt 1 view .LVU251
 457:Core/Src/main.c ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 839              		.loc 1 457 34 is_stmt 0 view .LVU252
 840 0044 8361     		str	r3, [r0, #24]
 458:Core/Src/main.c ****         Error_Handler();
 841              		.loc 1 458 5 is_stmt 1 view .LVU253
 458:Core/Src/main.c ****         Error_Handler();
 842              		.loc 1 458 9 is_stmt 0 view .LVU254
 843 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 844              	.LVL34:
 458:Core/Src/main.c ****         Error_Handler();
 845              		.loc 1 458 8 view .LVU255
 846 004a 00BB     		cbnz	r0, .L54
 461:Core/Src/main.c ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 847              		.loc 1 461 5 is_stmt 1 view .LVU256
 461:Core/Src/main.c ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 848              		.loc 1 461 36 is_stmt 0 view .LVU257
 849 004c 4FF48053 		mov	r3, #4096
 850 0050 0A93     		str	r3, [sp, #40]
 462:Core/Src/main.c ****         Error_Handler();
 851              		.loc 1 462 5 is_stmt 1 view .LVU258
 462:Core/Src/main.c ****         Error_Handler();
 852              		.loc 1 462 9 is_stmt 0 view .LVU259
 853 0052 0AA9     		add	r1, sp, #40
 854 0054 1448     		ldr	r0, .L58+8
 855 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 856              	.LVL35:
 462:Core/Src/main.c ****         Error_Handler();
 857              		.loc 1 462 8 view .LVU260
 858 005a D0B9     		cbnz	r0, .L55
 469:Core/Src/main.c ****     sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 859              		.loc 1 469 5 is_stmt 1 view .LVU261
 469:Core/Src/main.c ****     sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 860              		.loc 1 469 39 is_stmt 0 view .LVU262
 861 005c 2023     		movs	r3, #32
 862 005e 0893     		str	r3, [sp, #32]
 470:Core/Src/main.c ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 863              		.loc 1 470 5 is_stmt 1 view .LVU263
 470:Core/Src/main.c ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 864              		.loc 1 470 39 is_stmt 0 view .LVU264
 865 0060 0023     		movs	r3, #0
 866 0062 0993     		str	r3, [sp, #36]
 471:Core/Src/main.c ****         Error_Handler();
 867              		.loc 1 471 5 is_stmt 1 view .LVU265
 471:Core/Src/main.c ****         Error_Handler();
 868              		.loc 1 471 9 is_stmt 0 view .LVU266
 869 0064 08A9     		add	r1, sp, #32
 870 0066 1048     		ldr	r0, .L58+8
 871 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 872              	.LVL36:
 471:Core/Src/main.c ****         Error_Handler();
 873              		.loc 1 471 8 view .LVU267
 874 006c 98B9     		cbnz	r0, .L56
 474:Core/Src/main.c ****     sConfigOC.Pulse      = 0;
 875              		.loc 1 474 5 is_stmt 1 view .LVU268
 474:Core/Src/main.c ****     sConfigOC.Pulse      = 0;
 876              		.loc 1 474 26 is_stmt 0 view .LVU269
ARM GAS  /tmp/ccd0a1wf.s 			page 32


 877 006e 6023     		movs	r3, #96
 878 0070 0193     		str	r3, [sp, #4]
 475:Core/Src/main.c ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 879              		.loc 1 475 5 is_stmt 1 view .LVU270
 475:Core/Src/main.c ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 880              		.loc 1 475 26 is_stmt 0 view .LVU271
 881 0072 0022     		movs	r2, #0
 882 0074 0292     		str	r2, [sp, #8]
 476:Core/Src/main.c ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 883              		.loc 1 476 5 is_stmt 1 view .LVU272
 476:Core/Src/main.c ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 884              		.loc 1 476 26 is_stmt 0 view .LVU273
 885 0076 0392     		str	r2, [sp, #12]
 477:Core/Src/main.c ****     if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 886              		.loc 1 477 5 is_stmt 1 view .LVU274
 477:Core/Src/main.c ****     if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 887              		.loc 1 477 26 is_stmt 0 view .LVU275
 888 0078 0592     		str	r2, [sp, #20]
 478:Core/Src/main.c ****         Error_Handler();
 889              		.loc 1 478 5 is_stmt 1 view .LVU276
 478:Core/Src/main.c ****         Error_Handler();
 890              		.loc 1 478 9 is_stmt 0 view .LVU277
 891 007a 01A9     		add	r1, sp, #4
 892 007c 0A48     		ldr	r0, .L58+8
 893 007e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 894              	.LVL37:
 478:Core/Src/main.c ****         Error_Handler();
 895              		.loc 1 478 8 view .LVU278
 896 0082 50B9     		cbnz	r0, .L57
 481:Core/Src/main.c **** 
 897              		.loc 1 481 1 view .LVU279
 898 0084 0FB0     		add	sp, sp, #60
 899              		.cfi_remember_state
 900              		.cfi_def_cfa_offset 4
 901              		@ sp needed
 902 0086 5DF804FB 		ldr	pc, [sp], #4
 903              	.LVL38:
 904              	.L53:
 905              		.cfi_restore_state
 443:Core/Src/main.c ****     }
 906              		.loc 1 443 9 is_stmt 1 view .LVU280
 907 008a FFF7FEFF 		bl	Error_Handler
 908              	.LVL39:
 909              	.L54:
 459:Core/Src/main.c ****     }
 910              		.loc 1 459 9 view .LVU281
 911 008e FFF7FEFF 		bl	Error_Handler
 912              	.LVL40:
 913              	.L55:
 463:Core/Src/main.c ****     }
 914              		.loc 1 463 9 view .LVU282
 915 0092 FFF7FEFF 		bl	Error_Handler
 916              	.LVL41:
 917              	.L56:
 472:Core/Src/main.c ****     }
 918              		.loc 1 472 9 view .LVU283
 919 0096 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccd0a1wf.s 			page 33


 920              	.LVL42:
 921              	.L57:
 479:Core/Src/main.c ****     }
 922              		.loc 1 479 9 view .LVU284
 923 009a FFF7FEFF 		bl	Error_Handler
 924              	.LVL43:
 925              	.L59:
 926 009e 00BF     		.align	2
 927              	.L58:
 928 00a0 00000000 		.word	SystemCoreClock
 929 00a4 CDCCCCCC 		.word	-858993459
 930 00a8 00000000 		.word	.LANCHOR4
 931              		.cfi_endproc
 932              	.LFE245:
 934              		.section	.text.SystemClockHSE_Config,"ax",%progbits
 935              		.align	1
 936              		.global	SystemClockHSE_Config
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 940              		.fpu fpv4-sp-d16
 942              	SystemClockHSE_Config:
 943              	.LFB240:
 190:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 944              		.loc 1 190 29 view -0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 80
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948 0000 00B5     		push	{lr}
 949              		.cfi_def_cfa_offset 4
 950              		.cfi_offset 14, -4
 951 0002 95B0     		sub	sp, sp, #84
 952              		.cfi_def_cfa_offset 88
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 953              		.loc 1 191 3 view .LVU286
 192:Core/Src/main.c ****   HAL_StatusTypeDef ret = HAL_OK;
 954              		.loc 1 192 3 view .LVU287
 193:Core/Src/main.c ****     
 955              		.loc 1 193 3 view .LVU288
 956              	.LVL44:
 196:Core/Src/main.c ****   
 957              		.loc 1 196 3 view .LVU289
 958              	.LBB13:
 196:Core/Src/main.c ****   
 959              		.loc 1 196 3 view .LVU290
 960 0004 0023     		movs	r3, #0
 961 0006 0093     		str	r3, [sp]
 196:Core/Src/main.c ****   
 962              		.loc 1 196 3 view .LVU291
 963 0008 2D4A     		ldr	r2, .L72
 964 000a 116C     		ldr	r1, [r2, #64]
 965 000c 41F08051 		orr	r1, r1, #268435456
 966 0010 1164     		str	r1, [r2, #64]
 196:Core/Src/main.c ****   
 967              		.loc 1 196 3 view .LVU292
 968 0012 126C     		ldr	r2, [r2, #64]
 969 0014 02F08052 		and	r2, r2, #268435456
ARM GAS  /tmp/ccd0a1wf.s 			page 34


 970 0018 0092     		str	r2, [sp]
 196:Core/Src/main.c ****   
 971              		.loc 1 196 3 view .LVU293
 972 001a 009A     		ldr	r2, [sp]
 973              	.LBE13:
 196:Core/Src/main.c ****   
 974              		.loc 1 196 3 view .LVU294
 201:Core/Src/main.c **** 
 975              		.loc 1 201 3 view .LVU295
 976              	.LBB14:
 201:Core/Src/main.c **** 
 977              		.loc 1 201 3 view .LVU296
 978 001c 0193     		str	r3, [sp, #4]
 201:Core/Src/main.c **** 
 979              		.loc 1 201 3 view .LVU297
 980 001e 294A     		ldr	r2, .L72+4
 981 0020 1168     		ldr	r1, [r2]
 982 0022 41F44041 		orr	r1, r1, #49152
 983 0026 1160     		str	r1, [r2]
 201:Core/Src/main.c **** 
 984              		.loc 1 201 3 view .LVU298
 985 0028 1268     		ldr	r2, [r2]
 986 002a 02F44042 		and	r2, r2, #49152
 987 002e 0192     		str	r2, [sp, #4]
 201:Core/Src/main.c **** 
 988              		.loc 1 201 3 view .LVU299
 989 0030 019A     		ldr	r2, [sp, #4]
 990              	.LBE14:
 201:Core/Src/main.c **** 
 991              		.loc 1 201 3 view .LVU300
 204:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 992              		.loc 1 204 3 view .LVU301
 204:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 993              		.loc 1 204 34 is_stmt 0 view .LVU302
 994 0032 0122     		movs	r2, #1
 995 0034 0F92     		str	r2, [sp, #60]
 205:Core/Src/main.c ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 996              		.loc 1 205 3 is_stmt 1 view .LVU303
 205:Core/Src/main.c ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 997              		.loc 1 205 34 is_stmt 0 view .LVU304
 998 0036 1093     		str	r3, [sp, #64]
 206:Core/Src/main.c ****     Error_Handler();
 999              		.loc 1 206 3 is_stmt 1 view .LVU305
 206:Core/Src/main.c ****     Error_Handler();
 1000              		.loc 1 206 6 is_stmt 0 view .LVU306
 1001 0038 0521     		movs	r1, #5
 1002 003a 0FA8     		add	r0, sp, #60
 1003 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1004              	.LVL45:
 206:Core/Src/main.c ****     Error_Handler();
 1005              		.loc 1 206 5 view .LVU307
 1006 0040 D8B9     		cbnz	r0, .L68
 211:Core/Src/main.c ****   
 1007              		.loc 1 211 3 is_stmt 1 view .LVU308
 211:Core/Src/main.c ****   
 1008              		.loc 1 211 36 is_stmt 0 view .LVU309
 1009 0042 0123     		movs	r3, #1
ARM GAS  /tmp/ccd0a1wf.s 			page 35


 1010 0044 0293     		str	r3, [sp, #8]
 216:Core/Src/main.c **** #endif /* HSE_CRYSTAL */
 1011              		.loc 1 216 3 is_stmt 1 view .LVU310
 216:Core/Src/main.c **** #endif /* HSE_CRYSTAL */
 1012              		.loc 1 216 30 is_stmt 0 view .LVU311
 1013 0046 4FF4A023 		mov	r3, #327680
 1014 004a 0393     		str	r3, [sp, #12]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1015              		.loc 1 218 3 is_stmt 1 view .LVU312
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1016              		.loc 1 218 35 is_stmt 0 view .LVU313
 1017 004c 0223     		movs	r3, #2
 1018 004e 0893     		str	r3, [sp, #32]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM      = 8;
 1019              		.loc 1 219 3 is_stmt 1 view .LVU314
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM      = 8;
 1020              		.loc 1 219 35 is_stmt 0 view .LVU315
 1021 0050 4FF48002 		mov	r2, #4194304
 1022 0054 0992     		str	r2, [sp, #36]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN      = 360;
 1023              		.loc 1 220 3 is_stmt 1 view .LVU316
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN      = 360;
 1024              		.loc 1 220 35 is_stmt 0 view .LVU317
 1025 0056 0822     		movs	r2, #8
 1026 0058 0A92     		str	r2, [sp, #40]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP      = RCC_PLLP_DIV2; 
 1027              		.loc 1 221 3 is_stmt 1 view .LVU318
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP      = RCC_PLLP_DIV2; 
 1028              		.loc 1 221 35 is_stmt 0 view .LVU319
 1029 005a 4FF4B472 		mov	r2, #360
 1030 005e 0B92     		str	r2, [sp, #44]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ      = 7;
 1031              		.loc 1 222 3 is_stmt 1 view .LVU320
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ      = 7;
 1032              		.loc 1 222 35 is_stmt 0 view .LVU321
 1033 0060 0C93     		str	r3, [sp, #48]
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR      = 6;
 1034              		.loc 1 223 3 is_stmt 1 view .LVU322
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR      = 6;
 1035              		.loc 1 223 35 is_stmt 0 view .LVU323
 1036 0062 0723     		movs	r3, #7
 1037 0064 0D93     		str	r3, [sp, #52]
 224:Core/Src/main.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1038              		.loc 1 224 3 is_stmt 1 view .LVU324
 224:Core/Src/main.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1039              		.loc 1 224 35 is_stmt 0 view .LVU325
 1040 0066 0623     		movs	r3, #6
 1041 0068 0E93     		str	r3, [sp, #56]
 225:Core/Src/main.c ****     /* Initialization Error */
 1042              		.loc 1 225 3 is_stmt 1 view .LVU326
 225:Core/Src/main.c ****     /* Initialization Error */
 1043              		.loc 1 225 6 is_stmt 0 view .LVU327
 1044 006a 02A8     		add	r0, sp, #8
 1045 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1046              	.LVL46:
 225:Core/Src/main.c ****     /* Initialization Error */
 1047              		.loc 1 225 5 view .LVU328
ARM GAS  /tmp/ccd0a1wf.s 			page 36


 1048 0070 28B9     		cbnz	r0, .L69
 231:Core/Src/main.c ****   if(ret != HAL_OK) {
 1049              		.loc 1 231 3 is_stmt 1 view .LVU329
 231:Core/Src/main.c ****   if(ret != HAL_OK) {
 1050              		.loc 1 231 9 is_stmt 0 view .LVU330
 1051 0072 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1052              	.LVL47:
 232:Core/Src/main.c ****     while(1) { ; }
 1053              		.loc 1 232 3 is_stmt 1 view .LVU331
 232:Core/Src/main.c ****     while(1) { ; }
 1054              		.loc 1 232 5 is_stmt 0 view .LVU332
 1055 0076 20B1     		cbz	r0, .L63
 1056              	.L64:
 233:Core/Src/main.c ****   }
 1057              		.loc 1 233 5 is_stmt 1 discriminator 1 view .LVU333
 233:Core/Src/main.c ****   }
 1058              		.loc 1 233 16 discriminator 1 view .LVU334
 233:Core/Src/main.c ****   }
 1059              		.loc 1 233 10 discriminator 1 view .LVU335
 1060 0078 FEE7     		b	.L64
 1061              	.LVL48:
 1062              	.L68:
 207:Core/Src/main.c ****   }
 1063              		.loc 1 207 5 view .LVU336
 1064 007a FFF7FEFF 		bl	Error_Handler
 1065              	.LVL49:
 1066              	.L69:
 227:Core/Src/main.c ****   }
 1067              		.loc 1 227 5 view .LVU337
 1068 007e FFF7FEFF 		bl	Error_Handler
 1069              	.LVL50:
 1070              	.L63:
 237:Core/Src/main.c ****                                       RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 1071              		.loc 1 237 3 view .LVU338
 237:Core/Src/main.c ****                                       RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 1072              		.loc 1 237 36 is_stmt 0 view .LVU339
 1073 0082 0F23     		movs	r3, #15
 1074 0084 0F93     		str	r3, [sp, #60]
 239:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 1075              		.loc 1 239 3 is_stmt 1 view .LVU340
 239:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 1076              		.loc 1 239 36 is_stmt 0 view .LVU341
 1077 0086 0223     		movs	r3, #2
 1078 0088 1093     		str	r3, [sp, #64]
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 1079              		.loc 1 240 3 is_stmt 1 view .LVU342
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 1080              		.loc 1 240 36 is_stmt 0 view .LVU343
 1081 008a 0023     		movs	r3, #0
 1082 008c 1193     		str	r3, [sp, #68]
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 1083              		.loc 1 241 3 is_stmt 1 view .LVU344
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 1084              		.loc 1 241 36 is_stmt 0 view .LVU345
 1085 008e 4FF4A052 		mov	r2, #5120
 1086 0092 1292     		str	r2, [sp, #72]
 242:Core/Src/main.c ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
ARM GAS  /tmp/ccd0a1wf.s 			page 37


 1087              		.loc 1 242 3 is_stmt 1 view .LVU346
 242:Core/Src/main.c ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 1088              		.loc 1 242 36 is_stmt 0 view .LVU347
 1089 0094 1393     		str	r3, [sp, #76]
 243:Core/Src/main.c ****     Error_Handler();
 1090              		.loc 1 243 3 is_stmt 1 view .LVU348
 243:Core/Src/main.c ****     Error_Handler();
 1091              		.loc 1 243 6 is_stmt 0 view .LVU349
 1092 0096 0521     		movs	r1, #5
 1093 0098 0FA8     		add	r0, sp, #60
 1094              	.LVL51:
 243:Core/Src/main.c ****     Error_Handler();
 1095              		.loc 1 243 6 view .LVU350
 1096 009a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1097              	.LVL52:
 243:Core/Src/main.c ****     Error_Handler();
 1098              		.loc 1 243 5 view .LVU351
 1099 009e 58B9     		cbnz	r0, .L70
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 1100              		.loc 1 248 3 is_stmt 1 view .LVU352
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 1101              		.loc 1 248 36 is_stmt 0 view .LVU353
 1102 00a0 0223     		movs	r3, #2
 1103 00a2 0293     		str	r3, [sp, #8]
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_NONE;
 1104              		.loc 1 249 3 is_stmt 1 view .LVU354
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_NONE;
 1105              		.loc 1 249 36 is_stmt 0 view .LVU355
 1106 00a4 0023     		movs	r3, #0
 1107 00a6 0593     		str	r3, [sp, #20]
 250:Core/Src/main.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1108              		.loc 1 250 3 is_stmt 1 view .LVU356
 250:Core/Src/main.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1109              		.loc 1 250 36 is_stmt 0 view .LVU357
 1110 00a8 0893     		str	r3, [sp, #32]
 251:Core/Src/main.c ****     Error_Handler();
 1111              		.loc 1 251 3 is_stmt 1 view .LVU358
 251:Core/Src/main.c ****     Error_Handler();
 1112              		.loc 1 251 6 is_stmt 0 view .LVU359
 1113 00aa 02A8     		add	r0, sp, #8
 1114 00ac FFF7FEFF 		bl	HAL_RCC_OscConfig
 1115              	.LVL53:
 251:Core/Src/main.c ****     Error_Handler();
 1116              		.loc 1 251 5 view .LVU360
 1117 00b0 20B9     		cbnz	r0, .L71
 254:Core/Src/main.c **** 
 1118              		.loc 1 254 1 view .LVU361
 1119 00b2 15B0     		add	sp, sp, #84
 1120              		.cfi_remember_state
 1121              		.cfi_def_cfa_offset 4
 1122              		@ sp needed
 1123 00b4 5DF804FB 		ldr	pc, [sp], #4
 1124              	.L70:
 1125              		.cfi_restore_state
 244:Core/Src/main.c ****   }
 1126              		.loc 1 244 5 is_stmt 1 view .LVU362
 1127 00b8 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccd0a1wf.s 			page 38


 1128              	.LVL54:
 1129              	.L71:
 252:Core/Src/main.c ****   }
 1130              		.loc 1 252 5 view .LVU363
 1131 00bc FFF7FEFF 		bl	Error_Handler
 1132              	.LVL55:
 1133              	.L73:
 1134              		.align	2
 1135              	.L72:
 1136 00c0 00380240 		.word	1073887232
 1137 00c4 00700040 		.word	1073770496
 1138              		.cfi_endproc
 1139              	.LFE240:
 1141              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1142              		.align	2
 1143              	.LC0:
 1144 0000 52616D70 		.ascii	"Ramp Min=%d Ramp Max=%d\012\015\000"
 1144      204D696E 
 1144      3D256420 
 1144      52616D70 
 1144      204D6178 
 1145              		.section	.text.main,"ax",%progbits
 1146              		.align	1
 1147              		.global	main
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1151              		.fpu fpv4-sp-d16
 1153              	main:
 1154              	.LFB239:
  73:Core/Src/main.c ****     #ifdef DEBUG
 1155              		.loc 1 73 12 view -0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159 0000 30B5     		push	{r4, r5, lr}
 1160              		.cfi_def_cfa_offset 12
 1161              		.cfi_offset 4, -12
 1162              		.cfi_offset 5, -8
 1163              		.cfi_offset 14, -4
 1164 0002 83B0     		sub	sp, sp, #12
 1165              		.cfi_def_cfa_offset 24
  77:Core/Src/main.c ****     #endif
 1166              		.loc 1 77 9 view .LVU365
 1167 0004 754D     		ldr	r5, .L95
 1168 0006 2B46     		mov	r3, r5
 1169 0008 754A     		ldr	r2, .L95+4
 1170 000a 1288     		ldrh	r2, [r2]
 1171 000c 7549     		ldr	r1, .L95+8
 1172 000e 0988     		ldrh	r1, [r1]
 1173 0010 4FF48050 		mov	r0, #4096
 1174 0014 FFF7FEFF 		bl	buildRamp
 1175              	.LVL56:
  79:Core/Src/main.c ****     ready_2_half = false;
 1176              		.loc 1 79 5 view .LVU366
  79:Core/Src/main.c ****     ready_2_half = false;
 1177              		.loc 1 79 18 is_stmt 0 view .LVU367
ARM GAS  /tmp/ccd0a1wf.s 			page 39


 1178 0018 0024     		movs	r4, #0
 1179 001a 734B     		ldr	r3, .L95+12
 1180 001c 1C70     		strb	r4, [r3]
  80:Core/Src/main.c ****     memset(avg, 0, sizeof(avg));
 1181              		.loc 1 80 5 is_stmt 1 view .LVU368
  80:Core/Src/main.c ****     memset(avg, 0, sizeof(avg));
 1182              		.loc 1 80 18 is_stmt 0 view .LVU369
 1183 001e 734B     		ldr	r3, .L95+16
 1184 0020 1C70     		strb	r4, [r3]
  81:Core/Src/main.c ****     nAvg = 0;
 1185              		.loc 1 81 5 is_stmt 1 view .LVU370
 1186 0022 4FF48042 		mov	r2, #16384
 1187 0026 2146     		mov	r1, r4
 1188 0028 7148     		ldr	r0, .L95+20
 1189 002a FFF7FEFF 		bl	memset
 1190              	.LVL57:
  82:Core/Src/main.c **** 
 1191              		.loc 1 82 5 view .LVU371
  82:Core/Src/main.c **** 
 1192              		.loc 1 82 10 is_stmt 0 view .LVU372
 1193 002e 714B     		ldr	r3, .L95+24
 1194 0030 1C80     		strh	r4, [r3]	@ movhi
  84:Core/Src/main.c ****     // SystemClock_Config();
 1195              		.loc 1 84 5 is_stmt 1 view .LVU373
 1196 0032 FFF7FEFF 		bl	HAL_Init
 1197              	.LVL58:
  86:Core/Src/main.c **** 
 1198              		.loc 1 86 5 view .LVU374
 1199 0036 FFF7FEFF 		bl	SystemClockHSE_Config
 1200              	.LVL59:
  88:Core/Src/main.c ****     MX_DMA_Init();
 1201              		.loc 1 88 5 view .LVU375
 1202 003a FFF7FEFF 		bl	MX_GPIO_Init
 1203              	.LVL60:
  89:Core/Src/main.c ****     MX_ADC1_Init();
 1204              		.loc 1 89 5 view .LVU376
 1205 003e FFF7FEFF 		bl	MX_DMA_Init
 1206              	.LVL61:
  90:Core/Src/main.c ****     MX_ADC2_Init();
 1207              		.loc 1 90 5 view .LVU377
 1208 0042 FFF7FEFF 		bl	MX_ADC1_Init
 1209              	.LVL62:
  91:Core/Src/main.c ****     MX_USART2_UART_Init();
 1210              		.loc 1 91 5 view .LVU378
 1211 0046 FFF7FEFF 		bl	MX_ADC2_Init
 1212              	.LVL63:
  92:Core/Src/main.c ****     MX_DAC_Init();
 1213              		.loc 1 92 5 view .LVU379
 1214 004a FFF7FEFF 		bl	MX_USART2_UART_Init
 1215              	.LVL64:
  93:Core/Src/main.c ****     MX_TIM2_Init();
 1216              		.loc 1 93 5 view .LVU380
 1217 004e FFF7FEFF 		bl	MX_DAC_Init
 1218              	.LVL65:
  94:Core/Src/main.c **** 
 1219              		.loc 1 94 5 view .LVU381
 1220 0052 FFF7FEFF 		bl	MX_TIM2_Init
ARM GAS  /tmp/ccd0a1wf.s 			page 40


 1221              	.LVL66:
  96:Core/Src/main.c ****                          DAC_CHANNEL_1, 
 1222              		.loc 1 96 5 view .LVU382
  96:Core/Src/main.c ****                          DAC_CHANNEL_1, 
 1223              		.loc 1 96 8 is_stmt 0 view .LVU383
 1224 0056 0094     		str	r4, [sp]
 1225 0058 4FF48053 		mov	r3, #4096
 1226 005c 2A46     		mov	r2, r5
 1227 005e 2146     		mov	r1, r4
 1228 0060 6548     		ldr	r0, .L95+28
 1229 0062 FFF7FEFF 		bl	HAL_DAC_Start_DMA
 1230              	.LVL67:
  96:Core/Src/main.c ****                          DAC_CHANNEL_1, 
 1231              		.loc 1 96 7 view .LVU384
 1232 0066 08B1     		cbz	r0, .L75
 101:Core/Src/main.c **** 
 1233              		.loc 1 101 9 is_stmt 1 view .LVU385
 1234 0068 FFF7FEFF 		bl	Error_Handler
 1235              	.LVL68:
 1236              	.L75:
 103:Core/Src/main.c ****                          (uint32_t*)&adc_val,
 1237              		.loc 1 103 5 view .LVU386
 103:Core/Src/main.c ****                          (uint32_t*)&adc_val,
 1238              		.loc 1 103 8 is_stmt 0 view .LVU387
 1239 006c 4FF40052 		mov	r2, #8192
 1240 0070 6249     		ldr	r1, .L95+32
 1241 0072 6348     		ldr	r0, .L95+36
 1242 0074 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1243              	.LVL69:
 103:Core/Src/main.c ****                          (uint32_t*)&adc_val,
 1244              		.loc 1 103 7 view .LVU388
 1245 0078 08B1     		cbz	r0, .L76
 106:Core/Src/main.c **** 
 1246              		.loc 1 106 9 is_stmt 1 view .LVU389
 1247 007a FFF7FEFF 		bl	Error_Handler
 1248              	.LVL70:
 1249              	.L76:
 108:Core/Src/main.c ****         Error_Handler();
 1250              		.loc 1 108 5 view .LVU390
 108:Core/Src/main.c ****         Error_Handler();
 1251              		.loc 1 108 8 is_stmt 0 view .LVU391
 1252 007e 6148     		ldr	r0, .L95+40
 1253 0080 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1254              	.LVL71:
 108:Core/Src/main.c ****         Error_Handler();
 1255              		.loc 1 108 7 view .LVU392
 1256 0084 18B9     		cbnz	r0, .L89
 115:Core/Src/main.c ****     while (1) {
 1257              		.loc 1 115 5 is_stmt 1 view .LVU393
 115:Core/Src/main.c ****     while (1) {
 1258              		.loc 1 115 14 is_stmt 0 view .LVU394
 1259 0086 604B     		ldr	r3, .L95+44
 1260 0088 0022     		movs	r2, #0
 1261 008a 1A70     		strb	r2, [r3]
 1262 008c 15E0     		b	.L86
 1263              	.L89:
 109:Core/Src/main.c ****     
ARM GAS  /tmp/ccd0a1wf.s 			page 41


 1264              		.loc 1 109 9 is_stmt 1 view .LVU395
 1265 008e FFF7FEFF 		bl	Error_Handler
 1266              	.LVL72:
 1267              	.L91:
 118:Core/Src/main.c ****             HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 1268              		.loc 1 118 13 view .LVU396
 118:Core/Src/main.c ****             HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 1269              		.loc 1 118 26 is_stmt 0 view .LVU397
 1270 0092 554B     		ldr	r3, .L95+12
 1271 0094 0022     		movs	r2, #0
 1272 0096 1A70     		strb	r2, [r3]
 119:Core/Src/main.c ****             memcpy(txBuff, adc_val, NS*sizeof(*adc_val));
 1273              		.loc 1 119 13 is_stmt 1 view .LVU398
 1274 0098 2021     		movs	r1, #32
 1275 009a 5C48     		ldr	r0, .L95+48
 1276 009c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1277              	.LVL73:
 120:Core/Src/main.c ****             bNewData = true;
 1278              		.loc 1 120 13 view .LVU399
 1279 00a0 4FF40052 		mov	r2, #8192
 1280 00a4 5549     		ldr	r1, .L95+32
 1281 00a6 5A48     		ldr	r0, .L95+52
 1282 00a8 FFF7FEFF 		bl	memcpy
 1283              	.LVL74:
 121:Core/Src/main.c ****         }
 1284              		.loc 1 121 13 view .LVU400
 121:Core/Src/main.c ****         }
 1285              		.loc 1 121 22 is_stmt 0 view .LVU401
 1286 00ac 564B     		ldr	r3, .L95+44
 1287 00ae 0122     		movs	r2, #1
 1288 00b0 1A70     		strb	r2, [r3]
 1289              	.L79:
 158:Core/Src/main.c ****             bNewRamp = false;
 1290              		.loc 1 158 9 is_stmt 1 view .LVU402
 158:Core/Src/main.c ****             bNewRamp = false;
 1291              		.loc 1 158 12 is_stmt 0 view .LVU403
 1292 00b2 584B     		ldr	r3, .L95+56
 1293 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 158:Core/Src/main.c ****             bNewRamp = false;
 1294              		.loc 1 158 11 view .LVU404
 1295 00b6 002B     		cmp	r3, #0
 1296 00b8 70D1     		bne	.L90
 1297              	.L86:
 116:Core/Src/main.c ****         if(ready_1_half) {
 1298              		.loc 1 116 5 is_stmt 1 view .LVU405
 117:Core/Src/main.c ****             ready_1_half = false;
 1299              		.loc 1 117 9 view .LVU406
 117:Core/Src/main.c ****             ready_1_half = false;
 1300              		.loc 1 117 12 is_stmt 0 view .LVU407
 1301 00ba 4B4B     		ldr	r3, .L95+12
 1302 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 117:Core/Src/main.c ****             ready_1_half = false;
 1303              		.loc 1 117 11 view .LVU408
 1304 00be 002B     		cmp	r3, #0
 1305 00c0 E7D1     		bne	.L91
 123:Core/Src/main.c ****             ready_2_half = false;
 1306              		.loc 1 123 14 is_stmt 1 view .LVU409
ARM GAS  /tmp/ccd0a1wf.s 			page 42


 123:Core/Src/main.c ****             ready_2_half = false;
 1307              		.loc 1 123 17 is_stmt 0 view .LVU410
 1308 00c2 4A4B     		ldr	r3, .L95+16
 1309 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 123:Core/Src/main.c ****             ready_2_half = false;
 1310              		.loc 1 123 16 view .LVU411
 1311 00c6 3BB9     		cbnz	r3, .L92
 130:Core/Src/main.c ****                 bNewData = false;
 1312              		.loc 1 130 13 is_stmt 1 view .LVU412
 130:Core/Src/main.c ****                 bNewData = false;
 1313              		.loc 1 130 16 is_stmt 0 view .LVU413
 1314 00c8 4F4B     		ldr	r3, .L95+44
 1315 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 130:Core/Src/main.c ****                 bNewData = false;
 1316              		.loc 1 130 15 view .LVU414
 1317 00cc 002B     		cmp	r3, #0
 1318 00ce F0D0     		beq	.L79
 131:Core/Src/main.c ****                 for(int i=0; i<NS; i++) {
 1319              		.loc 1 131 17 is_stmt 1 view .LVU415
 131:Core/Src/main.c ****                 for(int i=0; i<NS; i++) {
 1320              		.loc 1 131 26 is_stmt 0 view .LVU416
 1321 00d0 0023     		movs	r3, #0
 1322 00d2 4D4A     		ldr	r2, .L95+44
 1323 00d4 1370     		strb	r3, [r2]
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1324              		.loc 1 132 17 is_stmt 1 view .LVU417
 1325              	.LBB15:
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1326              		.loc 1 132 21 view .LVU418
 1327              	.LVL75:
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1328              		.loc 1 132 17 is_stmt 0 view .LVU419
 1329 00d6 1AE0     		b	.L81
 1330              	.LVL76:
 1331              	.L92:
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1332              		.loc 1 132 17 view .LVU420
 1333              	.LBE15:
 124:Core/Src/main.c ****             HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 1334              		.loc 1 124 13 is_stmt 1 view .LVU421
 124:Core/Src/main.c ****             HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 1335              		.loc 1 124 26 is_stmt 0 view .LVU422
 1336 00d8 444B     		ldr	r3, .L95+16
 1337 00da 0022     		movs	r2, #0
 1338 00dc 1A70     		strb	r2, [r3]
 125:Core/Src/main.c ****             memcpy(txBuff, &adc_val[NS], NS*sizeof(*adc_val));
 1339              		.loc 1 125 13 is_stmt 1 view .LVU423
 1340 00de 2021     		movs	r1, #32
 1341 00e0 4A48     		ldr	r0, .L95+48
 1342 00e2 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1343              	.LVL77:
 126:Core/Src/main.c ****             bNewData = true;
 1344              		.loc 1 126 13 view .LVU424
 1345 00e6 4FF40052 		mov	r2, #8192
 1346 00ea 4B49     		ldr	r1, .L95+60
 1347 00ec 4848     		ldr	r0, .L95+52
 1348 00ee FFF7FEFF 		bl	memcpy
ARM GAS  /tmp/ccd0a1wf.s 			page 43


 1349              	.LVL78:
 127:Core/Src/main.c ****         }
 1350              		.loc 1 127 13 view .LVU425
 127:Core/Src/main.c ****         }
 1351              		.loc 1 127 22 is_stmt 0 view .LVU426
 1352 00f2 454B     		ldr	r3, .L95+44
 1353 00f4 0122     		movs	r2, #1
 1354 00f6 1A70     		strb	r2, [r3]
 1355 00f8 DBE7     		b	.L79
 1356              	.LVL79:
 1357              	.L82:
 1358              	.LBB16:
 133:Core/Src/main.c ****                 }
 1359              		.loc 1 133 21 is_stmt 1 discriminator 3 view .LVU427
 133:Core/Src/main.c ****                 }
 1360              		.loc 1 133 37 is_stmt 0 discriminator 3 view .LVU428
 1361 00fa 454A     		ldr	r2, .L95+52
 1362 00fc 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 133:Core/Src/main.c ****                 }
 1363              		.loc 1 133 28 discriminator 3 view .LVU429
 1364 0100 3B49     		ldr	r1, .L95+20
 1365 0102 51F82320 		ldr	r2, [r1, r3, lsl #2]
 1366 0106 0244     		add	r2, r2, r0
 1367 0108 41F82320 		str	r2, [r1, r3, lsl #2]
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1368              		.loc 1 132 36 is_stmt 1 discriminator 3 view .LVU430
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1369              		.loc 1 132 37 is_stmt 0 discriminator 3 view .LVU431
 1370 010c 0133     		adds	r3, r3, #1
 1371              	.LVL80:
 1372              	.L81:
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1373              		.loc 1 132 30 is_stmt 1 discriminator 1 view .LVU432
 132:Core/Src/main.c ****                     avg[i] += txBuff[i];
 1374              		.loc 1 132 17 is_stmt 0 discriminator 1 view .LVU433
 1375 010e B3F5805F 		cmp	r3, #4096
 1376 0112 F2DB     		blt	.L82
 1377              	.LBE16:
 135:Core/Src/main.c ****                 if(nAvg >= AVERNUM) {
 1378              		.loc 1 135 17 is_stmt 1 view .LVU434
 135:Core/Src/main.c ****                 if(nAvg >= AVERNUM) {
 1379              		.loc 1 135 21 is_stmt 0 view .LVU435
 1380 0114 374A     		ldr	r2, .L95+24
 1381 0116 1388     		ldrh	r3, [r2]
 1382              	.LVL81:
 135:Core/Src/main.c ****                 if(nAvg >= AVERNUM) {
 1383              		.loc 1 135 21 view .LVU436
 1384 0118 0133     		adds	r3, r3, #1
 1385 011a 9BB2     		uxth	r3, r3
 1386 011c 1380     		strh	r3, [r2]	@ movhi
 136:Core/Src/main.c ****                     HAL_TIM_Base_Stop(&htim2);
 1387              		.loc 1 136 17 is_stmt 1 view .LVU437
 136:Core/Src/main.c ****                     HAL_TIM_Base_Stop(&htim2);
 1388              		.loc 1 136 19 is_stmt 0 view .LVU438
 1389 011e 132B     		cmp	r3, #19
 1390 0120 C7D9     		bls	.L79
 137:Core/Src/main.c ****                     HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
ARM GAS  /tmp/ccd0a1wf.s 			page 44


 1391              		.loc 1 137 21 is_stmt 1 view .LVU439
 1392 0122 3848     		ldr	r0, .L95+40
 1393 0124 FFF7FEFF 		bl	HAL_TIM_Base_Stop
 1394              	.LVL82:
 138:Core/Src/main.c ****                     HAL_ADC_Stop_DMA(&hadc1);
 1395              		.loc 1 138 21 view .LVU440
 1396 0128 0021     		movs	r1, #0
 1397 012a 3348     		ldr	r0, .L95+28
 1398 012c FFF7FEFF 		bl	HAL_DAC_Stop_DMA
 1399              	.LVL83:
 139:Core/Src/main.c ****                     for(int i=0; i<NS; i++) {
 1400              		.loc 1 139 21 view .LVU441
 1401 0130 3348     		ldr	r0, .L95+36
 1402 0132 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1403              	.LVL84:
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1404              		.loc 1 140 21 view .LVU442
 1405              	.LBB17:
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1406              		.loc 1 140 25 view .LVU443
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1407              		.loc 1 140 29 is_stmt 0 view .LVU444
 1408 0136 0022     		movs	r2, #0
 1409              	.LVL85:
 1410              	.L83:
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1411              		.loc 1 140 34 is_stmt 1 discriminator 1 view .LVU445
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1412              		.loc 1 140 21 is_stmt 0 discriminator 1 view .LVU446
 1413 0138 B2F5805F 		cmp	r2, #4096
 1414 013c 0ADA     		bge	.L93
 141:Core/Src/main.c ****                         //sprintf(outBuff, "i=%d f=%ld\n\r", i, avg[i]);
 1415              		.loc 1 141 25 is_stmt 1 discriminator 3 view .LVU447
 141:Core/Src/main.c ****                         //sprintf(outBuff, "i=%d f=%ld\n\r", i, avg[i]);
 1416              		.loc 1 141 37 is_stmt 0 discriminator 3 view .LVU448
 1417 013e 2C49     		ldr	r1, .L95+20
 1418 0140 51F82230 		ldr	r3, [r1, r2, lsl #2]
 141:Core/Src/main.c ****                         //sprintf(outBuff, "i=%d f=%ld\n\r", i, avg[i]);
 1419              		.loc 1 141 40 discriminator 3 view .LVU449
 1420 0144 3548     		ldr	r0, .L95+64
 1421 0146 A0FB0303 		umull	r0, r3, r0, r3
 1422 014a 1B09     		lsrs	r3, r3, #4
 141:Core/Src/main.c ****                         //sprintf(outBuff, "i=%d f=%ld\n\r", i, avg[i]);
 1423              		.loc 1 141 32 discriminator 3 view .LVU450
 1424 014c 41F82230 		str	r3, [r1, r2, lsl #2]
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1425              		.loc 1 140 40 is_stmt 1 discriminator 3 view .LVU451
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1426              		.loc 1 140 41 is_stmt 0 discriminator 3 view .LVU452
 1427 0150 0132     		adds	r2, r2, #1
 1428              	.LVL86:
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1429              		.loc 1 140 41 discriminator 3 view .LVU453
 1430 0152 F1E7     		b	.L83
 1431              	.L93:
 140:Core/Src/main.c ****                         avg[i] = avg[i]/AVERNUM;
 1432              		.loc 1 140 41 discriminator 3 view .LVU454
ARM GAS  /tmp/ccd0a1wf.s 			page 45


 1433              	.LBE17:
 145:Core/Src/main.c ****                     memset(avg, 0, sizeof(avg));
 1434              		.loc 1 145 21 is_stmt 1 view .LVU455
 145:Core/Src/main.c ****                     memset(avg, 0, sizeof(avg));
 1435              		.loc 1 145 26 is_stmt 0 view .LVU456
 1436 0154 0021     		movs	r1, #0
 1437 0156 274B     		ldr	r3, .L95+24
 1438 0158 1980     		strh	r1, [r3]	@ movhi
 146:Core/Src/main.c ****                     if(HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 1439              		.loc 1 146 21 is_stmt 1 view .LVU457
 1440 015a 4FF48042 		mov	r2, #16384
 1441              	.LVL87:
 146:Core/Src/main.c ****                     if(HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 1442              		.loc 1 146 21 is_stmt 0 view .LVU458
 1443 015e 2448     		ldr	r0, .L95+20
 1444 0160 FFF7FEFF 		bl	memset
 1445              	.LVL88:
 147:Core/Src/main.c ****                         Error_Handler();
 1446              		.loc 1 147 21 is_stmt 1 view .LVU459
 147:Core/Src/main.c ****                         Error_Handler();
 1447              		.loc 1 147 24 is_stmt 0 view .LVU460
 1448 0164 2E48     		ldr	r0, .L95+68
 1449 0166 FFF7FEFF 		bl	HAL_ADC_Start_IT
 1450              	.LVL89:
 147:Core/Src/main.c ****                         Error_Handler();
 1451              		.loc 1 147 23 view .LVU461
 1452 016a A8B9     		cbnz	r0, .L94
 149:Core/Src/main.c ****                     ready_2_half = false;
 1453              		.loc 1 149 21 is_stmt 1 view .LVU462
 149:Core/Src/main.c ****                     ready_2_half = false;
 1454              		.loc 1 149 34 is_stmt 0 view .LVU463
 1455 016c 0021     		movs	r1, #0
 1456 016e 1E4B     		ldr	r3, .L95+12
 1457 0170 1970     		strb	r1, [r3]
 150:Core/Src/main.c ****                     HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)Ramp, NS, DAC_ALIGN_12B_R);
 1458              		.loc 1 150 21 is_stmt 1 view .LVU464
 150:Core/Src/main.c ****                     HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)Ramp, NS, DAC_ALIGN_12B_R);
 1459              		.loc 1 150 34 is_stmt 0 view .LVU465
 1460 0172 1E4B     		ldr	r3, .L95+16
 1461 0174 1970     		strb	r1, [r3]
 151:Core/Src/main.c ****                     HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 2*NS);
 1462              		.loc 1 151 21 is_stmt 1 view .LVU466
 1463 0176 0091     		str	r1, [sp]
 1464 0178 4FF48053 		mov	r3, #4096
 1465 017c 174A     		ldr	r2, .L95
 1466 017e 1E48     		ldr	r0, .L95+28
 1467 0180 FFF7FEFF 		bl	HAL_DAC_Start_DMA
 1468              	.LVL90:
 152:Core/Src/main.c ****                     HAL_TIM_Base_Start(&htim2);
 1469              		.loc 1 152 21 view .LVU467
 1470 0184 4FF40052 		mov	r2, #8192
 1471 0188 1C49     		ldr	r1, .L95+32
 1472 018a 1D48     		ldr	r0, .L95+36
 1473 018c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1474              	.LVL91:
 153:Core/Src/main.c ****                 }
 1475              		.loc 1 153 21 view .LVU468
ARM GAS  /tmp/ccd0a1wf.s 			page 46


 1476 0190 1C48     		ldr	r0, .L95+40
 1477 0192 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1478              	.LVL92:
 1479 0196 8CE7     		b	.L79
 1480              	.L94:
 148:Core/Src/main.c ****                     ready_1_half = false;
 1481              		.loc 1 148 25 view .LVU469
 1482 0198 FFF7FEFF 		bl	Error_Handler
 1483              	.LVL93:
 1484              	.L90:
 159:Core/Src/main.c ****             rampMin = (uint16_t)HAL_ADC_GetValue(&hadc2);
 1485              		.loc 1 159 13 view .LVU470
 159:Core/Src/main.c ****             rampMin = (uint16_t)HAL_ADC_GetValue(&hadc2);
 1486              		.loc 1 159 22 is_stmt 0 view .LVU471
 1487 019c 1D4B     		ldr	r3, .L95+56
 1488 019e 0022     		movs	r2, #0
 1489 01a0 1A70     		strb	r2, [r3]
 160:Core/Src/main.c ****             rampMax = (uint16_t)HAL_ADC_GetValue(&hadc2);
 1490              		.loc 1 160 13 is_stmt 1 view .LVU472
 160:Core/Src/main.c ****             rampMax = (uint16_t)HAL_ADC_GetValue(&hadc2);
 1491              		.loc 1 160 33 is_stmt 0 view .LVU473
 1492 01a2 1F4C     		ldr	r4, .L95+68
 1493 01a4 2046     		mov	r0, r4
 1494 01a6 FFF7FEFF 		bl	HAL_ADC_GetValue
 1495              	.LVL94:
 160:Core/Src/main.c ****             rampMax = (uint16_t)HAL_ADC_GetValue(&hadc2);
 1496              		.loc 1 160 21 view .LVU474
 1497 01aa 0E4D     		ldr	r5, .L95+8
 1498 01ac 2880     		strh	r0, [r5]	@ movhi
 161:Core/Src/main.c ****             sprintf(outBuff, "Ramp Min=%d Ramp Max=%d\n\r", rampMin, rampMax);
 1499              		.loc 1 161 13 is_stmt 1 view .LVU475
 161:Core/Src/main.c ****             sprintf(outBuff, "Ramp Min=%d Ramp Max=%d\n\r", rampMin, rampMax);
 1500              		.loc 1 161 33 is_stmt 0 view .LVU476
 1501 01ae 2046     		mov	r0, r4
 1502 01b0 FFF7FEFF 		bl	HAL_ADC_GetValue
 1503              	.LVL95:
 161:Core/Src/main.c ****             sprintf(outBuff, "Ramp Min=%d Ramp Max=%d\n\r", rampMin, rampMax);
 1504              		.loc 1 161 23 view .LVU477
 1505 01b4 83B2     		uxth	r3, r0
 161:Core/Src/main.c ****             sprintf(outBuff, "Ramp Min=%d Ramp Max=%d\n\r", rampMin, rampMax);
 1506              		.loc 1 161 21 view .LVU478
 1507 01b6 0A4A     		ldr	r2, .L95+4
 1508 01b8 1380     		strh	r3, [r2]	@ movhi
 162:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, (uint8_t*)outBuff, strlen(outBuff), 10);
 1509              		.loc 1 162 13 is_stmt 1 view .LVU479
 1510 01ba 1A4C     		ldr	r4, .L95+72
 1511 01bc 2A88     		ldrh	r2, [r5]
 1512 01be 1A49     		ldr	r1, .L95+76
 1513 01c0 2046     		mov	r0, r4
 1514 01c2 FFF7FEFF 		bl	sprintf
 1515              	.LVL96:
 163:Core/Src/main.c ****         }
 1516              		.loc 1 163 13 view .LVU480
 163:Core/Src/main.c ****         }
 1517              		.loc 1 163 59 is_stmt 0 view .LVU481
 1518 01c6 2046     		mov	r0, r4
 1519 01c8 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccd0a1wf.s 			page 47


 1520              	.LVL97:
 163:Core/Src/main.c ****         }
 1521              		.loc 1 163 13 view .LVU482
 1522 01cc 0A23     		movs	r3, #10
 1523 01ce 82B2     		uxth	r2, r0
 1524 01d0 2146     		mov	r1, r4
 1525 01d2 1648     		ldr	r0, .L95+80
 1526 01d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1527              	.LVL98:
 1528 01d8 6FE7     		b	.L86
 1529              	.L96:
 1530 01da 00BF     		.align	2
 1531              	.L95:
 1532 01dc 00000000 		.word	Ramp
 1533 01e0 00000000 		.word	.LANCHOR5
 1534 01e4 00000000 		.word	.LANCHOR6
 1535 01e8 00000000 		.word	.LANCHOR7
 1536 01ec 00000000 		.word	.LANCHOR8
 1537 01f0 00000000 		.word	avg
 1538 01f4 00000000 		.word	.LANCHOR9
 1539 01f8 00000000 		.word	.LANCHOR3
 1540 01fc 00000000 		.word	adc_val
 1541 0200 00000000 		.word	.LANCHOR0
 1542 0204 00000000 		.word	.LANCHOR4
 1543 0208 00000000 		.word	.LANCHOR10
 1544 020c 00000240 		.word	1073872896
 1545 0210 00000000 		.word	txBuff
 1546 0214 00000000 		.word	.LANCHOR11
 1547 0218 00200000 		.word	adc_val+8192
 1548 021c CDCCCCCC 		.word	-858993459
 1549 0220 00000000 		.word	.LANCHOR1
 1550 0224 00000000 		.word	.LANCHOR12
 1551 0228 00000000 		.word	.LC0
 1552 022c 00000000 		.word	.LANCHOR2
 1553              		.cfi_endproc
 1554              	.LFE239:
 1556              		.section	.text.SystemClock_Config,"ax",%progbits
 1557              		.align	1
 1558              		.global	SystemClock_Config
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu fpv4-sp-d16
 1564              	SystemClock_Config:
 1565              	.LFB241:
 305:Core/Src/main.c ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1566              		.loc 1 305 26 is_stmt 1 view -0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 80
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570 0000 00B5     		push	{lr}
 1571              		.cfi_def_cfa_offset 4
 1572              		.cfi_offset 14, -4
 1573 0002 95B0     		sub	sp, sp, #84
 1574              		.cfi_def_cfa_offset 88
 306:Core/Src/main.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1575              		.loc 1 306 5 view .LVU484
ARM GAS  /tmp/ccd0a1wf.s 			page 48


 306:Core/Src/main.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1576              		.loc 1 306 24 is_stmt 0 view .LVU485
 1577 0004 3422     		movs	r2, #52
 1578 0006 0021     		movs	r1, #0
 1579 0008 07A8     		add	r0, sp, #28
 1580 000a FFF7FEFF 		bl	memset
 1581              	.LVL99:
 307:Core/Src/main.c **** 
 1582              		.loc 1 307 5 is_stmt 1 view .LVU486
 307:Core/Src/main.c **** 
 1583              		.loc 1 307 24 is_stmt 0 view .LVU487
 1584 000e 0023     		movs	r3, #0
 1585 0010 0293     		str	r3, [sp, #8]
 1586 0012 0393     		str	r3, [sp, #12]
 1587 0014 0493     		str	r3, [sp, #16]
 1588 0016 0593     		str	r3, [sp, #20]
 1589 0018 0693     		str	r3, [sp, #24]
 309:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1590              		.loc 1 309 5 is_stmt 1 view .LVU488
 1591              	.LBB18:
 309:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1592              		.loc 1 309 5 view .LVU489
 1593 001a 0093     		str	r3, [sp]
 309:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1594              		.loc 1 309 5 view .LVU490
 1595 001c 1F4A     		ldr	r2, .L103
 1596 001e 116C     		ldr	r1, [r2, #64]
 1597 0020 41F08051 		orr	r1, r1, #268435456
 1598 0024 1164     		str	r1, [r2, #64]
 309:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1599              		.loc 1 309 5 view .LVU491
 1600 0026 126C     		ldr	r2, [r2, #64]
 1601 0028 02F08052 		and	r2, r2, #268435456
 1602 002c 0092     		str	r2, [sp]
 309:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1603              		.loc 1 309 5 view .LVU492
 1604 002e 009A     		ldr	r2, [sp]
 1605              	.LBE18:
 309:Core/Src/main.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1606              		.loc 1 309 5 view .LVU493
 310:Core/Src/main.c **** 
 1607              		.loc 1 310 5 view .LVU494
 1608              	.LBB19:
 310:Core/Src/main.c **** 
 1609              		.loc 1 310 5 view .LVU495
 1610 0030 0193     		str	r3, [sp, #4]
 310:Core/Src/main.c **** 
 1611              		.loc 1 310 5 view .LVU496
 1612 0032 1B49     		ldr	r1, .L103+4
 1613 0034 0A68     		ldr	r2, [r1]
 1614 0036 22F44042 		bic	r2, r2, #49152
 1615 003a 42F48042 		orr	r2, r2, #16384
 1616 003e 0A60     		str	r2, [r1]
 310:Core/Src/main.c **** 
 1617              		.loc 1 310 5 view .LVU497
 1618 0040 0A68     		ldr	r2, [r1]
 1619 0042 02F44042 		and	r2, r2, #49152
ARM GAS  /tmp/ccd0a1wf.s 			page 49


 1620 0046 0192     		str	r2, [sp, #4]
 310:Core/Src/main.c **** 
 1621              		.loc 1 310 5 view .LVU498
 1622 0048 019A     		ldr	r2, [sp, #4]
 1623              	.LBE19:
 310:Core/Src/main.c **** 
 1624              		.loc 1 310 5 view .LVU499
 312:Core/Src/main.c ****     RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 1625              		.loc 1 312 5 view .LVU500
 312:Core/Src/main.c ****     RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 1626              		.loc 1 312 43 is_stmt 0 view .LVU501
 1627 004a 0222     		movs	r2, #2
 1628 004c 0792     		str	r2, [sp, #28]
 313:Core/Src/main.c ****     RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1629              		.loc 1 313 5 is_stmt 1 view .LVU502
 313:Core/Src/main.c ****     RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1630              		.loc 1 313 43 is_stmt 0 view .LVU503
 1631 004e 0121     		movs	r1, #1
 1632 0050 0A91     		str	r1, [sp, #40]
 314:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 1633              		.loc 1 314 5 is_stmt 1 view .LVU504
 314:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 1634              		.loc 1 314 43 is_stmt 0 view .LVU505
 1635 0052 1021     		movs	r1, #16
 1636 0054 0B91     		str	r1, [sp, #44]
 315:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 1637              		.loc 1 315 5 is_stmt 1 view .LVU506
 315:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 1638              		.loc 1 315 43 is_stmt 0 view .LVU507
 1639 0056 0D92     		str	r2, [sp, #52]
 316:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLM            = 16;
 1640              		.loc 1 316 5 is_stmt 1 view .LVU508
 316:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLM            = 16;
 1641              		.loc 1 316 43 is_stmt 0 view .LVU509
 1642 0058 0E93     		str	r3, [sp, #56]
 317:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLN            = 336;
 1643              		.loc 1 317 5 is_stmt 1 view .LVU510
 317:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLN            = 336;
 1644              		.loc 1 317 43 is_stmt 0 view .LVU511
 1645 005a 0F91     		str	r1, [sp, #60]
 318:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV4;
 1646              		.loc 1 318 5 is_stmt 1 view .LVU512
 318:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV4;
 1647              		.loc 1 318 43 is_stmt 0 view .LVU513
 1648 005c 4FF4A873 		mov	r3, #336
 1649 0060 1093     		str	r3, [sp, #64]
 319:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLQ            = 2;
 1650              		.loc 1 319 5 is_stmt 1 view .LVU514
 319:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLQ            = 2;
 1651              		.loc 1 319 43 is_stmt 0 view .LVU515
 1652 0062 0423     		movs	r3, #4
 1653 0064 1193     		str	r3, [sp, #68]
 320:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLR            = 2;
 1654              		.loc 1 320 5 is_stmt 1 view .LVU516
 320:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLR            = 2;
 1655              		.loc 1 320 43 is_stmt 0 view .LVU517
 1656 0066 1292     		str	r2, [sp, #72]
ARM GAS  /tmp/ccd0a1wf.s 			page 50


 321:Core/Src/main.c ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1657              		.loc 1 321 5 is_stmt 1 view .LVU518
 321:Core/Src/main.c ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1658              		.loc 1 321 43 is_stmt 0 view .LVU519
 1659 0068 1392     		str	r2, [sp, #76]
 322:Core/Src/main.c ****         Error_Handler();
 1660              		.loc 1 322 5 is_stmt 1 view .LVU520
 322:Core/Src/main.c ****         Error_Handler();
 1661              		.loc 1 322 9 is_stmt 0 view .LVU521
 1662 006a 07A8     		add	r0, sp, #28
 1663 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1664              	.LVL100:
 322:Core/Src/main.c ****         Error_Handler();
 1665              		.loc 1 322 8 view .LVU522
 1666 0070 80B9     		cbnz	r0, .L101
 326:Core/Src/main.c ****                                        RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1667              		.loc 1 326 5 is_stmt 1 view .LVU523
 326:Core/Src/main.c ****                                        RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1668              		.loc 1 326 38 is_stmt 0 view .LVU524
 1669 0072 0F23     		movs	r3, #15
 1670 0074 0293     		str	r3, [sp, #8]
 328:Core/Src/main.c ****     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 1671              		.loc 1 328 5 is_stmt 1 view .LVU525
 328:Core/Src/main.c ****     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 1672              		.loc 1 328 38 is_stmt 0 view .LVU526
 1673 0076 0221     		movs	r1, #2
 1674 0078 0391     		str	r1, [sp, #12]
 329:Core/Src/main.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1675              		.loc 1 329 5 is_stmt 1 view .LVU527
 329:Core/Src/main.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1676              		.loc 1 329 38 is_stmt 0 view .LVU528
 1677 007a 0023     		movs	r3, #0
 1678 007c 0493     		str	r3, [sp, #16]
 330:Core/Src/main.c ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1679              		.loc 1 330 5 is_stmt 1 view .LVU529
 330:Core/Src/main.c ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1680              		.loc 1 330 38 is_stmt 0 view .LVU530
 1681 007e 4FF48052 		mov	r2, #4096
 1682 0082 0592     		str	r2, [sp, #20]
 331:Core/Src/main.c **** 
 1683              		.loc 1 331 5 is_stmt 1 view .LVU531
 331:Core/Src/main.c **** 
 1684              		.loc 1 331 38 is_stmt 0 view .LVU532
 1685 0084 0693     		str	r3, [sp, #24]
 333:Core/Src/main.c ****         Error_Handler();
 1686              		.loc 1 333 5 is_stmt 1 view .LVU533
 333:Core/Src/main.c ****         Error_Handler();
 1687              		.loc 1 333 9 is_stmt 0 view .LVU534
 1688 0086 02A8     		add	r0, sp, #8
 1689 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1690              	.LVL101:
 333:Core/Src/main.c ****         Error_Handler();
 1691              		.loc 1 333 8 view .LVU535
 1692 008c 20B9     		cbnz	r0, .L102
 336:Core/Src/main.c **** #endif // OVERCLOCK
 1693              		.loc 1 336 1 view .LVU536
 1694 008e 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccd0a1wf.s 			page 51


 1695              		.cfi_remember_state
 1696              		.cfi_def_cfa_offset 4
 1697              		@ sp needed
 1698 0090 5DF804FB 		ldr	pc, [sp], #4
 1699              	.L101:
 1700              		.cfi_restore_state
 323:Core/Src/main.c ****     }
 1701              		.loc 1 323 9 is_stmt 1 view .LVU537
 1702 0094 FFF7FEFF 		bl	Error_Handler
 1703              	.LVL102:
 1704              	.L102:
 334:Core/Src/main.c ****     }
 1705              		.loc 1 334 9 view .LVU538
 1706 0098 FFF7FEFF 		bl	Error_Handler
 1707              	.LVL103:
 1708              	.L104:
 1709              		.align	2
 1710              	.L103:
 1711 009c 00380240 		.word	1073887232
 1712 00a0 00700040 		.word	1073770496
 1713              		.cfi_endproc
 1714              	.LFE241:
 1716              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1717              		.align	1
 1718              		.global	HAL_ADC_ConvHalfCpltCallback
 1719              		.syntax unified
 1720              		.thumb
 1721              		.thumb_func
 1722              		.fpu fpv4-sp-d16
 1724              	HAL_ADC_ConvHalfCpltCallback:
 1725              	.LVL104:
 1726              	.LFB250:
 548:Core/Src/main.c **** }
 549:Core/Src/main.c **** 
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** #ifdef  USE_FULL_ASSERT
 552:Core/Src/main.c **** void
 553:Core/Src/main.c **** assert_failed(uint8_t *file, uint32_t line) {
 554:Core/Src/main.c **** }
 555:Core/Src/main.c **** #endif /* USE_FULL_ASSERT */
 556:Core/Src/main.c **** 
 557:Core/Src/main.c **** 
 558:Core/Src/main.c **** 
 559:Core/Src/main.c **** /// ADC Conversion_Half_Complete callback
 560:Core/Src/main.c **** void
 561:Core/Src/main.c **** HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hAdc) {
 1727              		.loc 1 561 55 view -0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 562:Core/Src/main.c ****     if(hAdc == &hadc1) {
 1732              		.loc 1 562 5 view .LVU540
 1733              		.loc 1 562 7 is_stmt 0 view .LVU541
 1734 0000 034B     		ldr	r3, .L108
 1735 0002 8342     		cmp	r3, r0
 1736 0004 00D0     		beq	.L107
ARM GAS  /tmp/ccd0a1wf.s 			page 52


 1737              	.L105:
 563:Core/Src/main.c ****         ready_1_half = true;
 564:Core/Src/main.c ****     }
 565:Core/Src/main.c **** }
 1738              		.loc 1 565 1 view .LVU542
 1739 0006 7047     		bx	lr
 1740              	.L107:
 563:Core/Src/main.c ****         ready_1_half = true;
 1741              		.loc 1 563 9 is_stmt 1 view .LVU543
 563:Core/Src/main.c ****         ready_1_half = true;
 1742              		.loc 1 563 22 is_stmt 0 view .LVU544
 1743 0008 024B     		ldr	r3, .L108+4
 1744 000a 0122     		movs	r2, #1
 1745 000c 1A70     		strb	r2, [r3]
 1746              		.loc 1 565 1 view .LVU545
 1747 000e FAE7     		b	.L105
 1748              	.L109:
 1749              		.align	2
 1750              	.L108:
 1751 0010 00000000 		.word	.LANCHOR0
 1752 0014 00000000 		.word	.LANCHOR7
 1753              		.cfi_endproc
 1754              	.LFE250:
 1756              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1757              		.align	1
 1758              		.global	HAL_ADC_ConvCpltCallback
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
 1762              		.fpu fpv4-sp-d16
 1764              	HAL_ADC_ConvCpltCallback:
 1765              	.LVL105:
 1766              	.LFB251:
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** 
 568:Core/Src/main.c **** /// ADC Conversion_Complete callback
 569:Core/Src/main.c **** void
 570:Core/Src/main.c **** HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hAdc) {
 1767              		.loc 1 570 51 is_stmt 1 view -0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              		@ link register save eliminated.
 571:Core/Src/main.c ****     if(hAdc == &hadc1) {
 1772              		.loc 1 571 5 view .LVU547
 1773              		.loc 1 571 7 is_stmt 0 view .LVU548
 1774 0000 074B     		ldr	r3, .L115
 1775 0002 9842     		cmp	r0, r3
 1776 0004 03D0     		beq	.L113
 572:Core/Src/main.c ****         ready_2_half = true;
 573:Core/Src/main.c ****     }
 574:Core/Src/main.c ****     else if(hAdc == &hadc2) {
 1777              		.loc 1 574 10 is_stmt 1 view .LVU549
 1778              		.loc 1 574 12 is_stmt 0 view .LVU550
 1779 0006 074B     		ldr	r3, .L115+4
 1780 0008 9842     		cmp	r0, r3
 1781 000a 04D0     		beq	.L114
ARM GAS  /tmp/ccd0a1wf.s 			page 53


 1782              	.L110:
 575:Core/Src/main.c ****         bNewRamp = true;
 576:Core/Src/main.c ****     }
 577:Core/Src/main.c **** }
 1783              		.loc 1 577 1 view .LVU551
 1784 000c 7047     		bx	lr
 1785              	.L113:
 572:Core/Src/main.c ****         ready_2_half = true;
 1786              		.loc 1 572 9 is_stmt 1 view .LVU552
 572:Core/Src/main.c ****         ready_2_half = true;
 1787              		.loc 1 572 22 is_stmt 0 view .LVU553
 1788 000e 064B     		ldr	r3, .L115+8
 1789 0010 0122     		movs	r2, #1
 1790 0012 1A70     		strb	r2, [r3]
 1791 0014 7047     		bx	lr
 1792              	.L114:
 575:Core/Src/main.c ****         bNewRamp = true;
 1793              		.loc 1 575 9 is_stmt 1 view .LVU554
 575:Core/Src/main.c ****         bNewRamp = true;
 1794              		.loc 1 575 18 is_stmt 0 view .LVU555
 1795 0016 054B     		ldr	r3, .L115+12
 1796 0018 0122     		movs	r2, #1
 1797 001a 1A70     		strb	r2, [r3]
 1798              		.loc 1 577 1 view .LVU556
 1799 001c F6E7     		b	.L110
 1800              	.L116:
 1801 001e 00BF     		.align	2
 1802              	.L115:
 1803 0020 00000000 		.word	.LANCHOR0
 1804 0024 00000000 		.word	.LANCHOR1
 1805 0028 00000000 		.word	.LANCHOR8
 1806 002c 00000000 		.word	.LANCHOR11
 1807              		.cfi_endproc
 1808              	.LFE251:
 1810              		.global	bNewRamp
 1811              		.global	outBuff
 1812              		.global	bNewData
 1813              		.global	ready_2_half
 1814              		.global	ready_1_half
 1815              		.global	rampMax
 1816              		.global	rampMin
 1817              		.global	nAvg
 1818              		.global	avg
 1819              		.global	txBuff
 1820              		.global	adc_val
 1821              		.global	Ramp
 1822              		.global	huart2
 1823              		.global	htim2
 1824              		.global	hdma_dac1
 1825              		.global	hdac
 1826              		.global	hdma_adc2
 1827              		.global	hadc2
 1828              		.global	hdma_adc1
 1829              		.global	hadc1
 1830              		.section	.bss.Ramp,"aw",%nobits
 1831              		.align	2
 1834              	Ramp:
ARM GAS  /tmp/ccd0a1wf.s 			page 54


 1835 0000 00000000 		.space	8192
 1835      00000000 
 1835      00000000 
 1835      00000000 
 1835      00000000 
 1836              		.section	.bss.adc_val,"aw",%nobits
 1837              		.align	2
 1840              	adc_val:
 1841 0000 00000000 		.space	16384
 1841      00000000 
 1841      00000000 
 1841      00000000 
 1841      00000000 
 1842              		.section	.bss.avg,"aw",%nobits
 1843              		.align	2
 1846              	avg:
 1847 0000 00000000 		.space	16384
 1847      00000000 
 1847      00000000 
 1847      00000000 
 1847      00000000 
 1848              		.section	.bss.bNewData,"aw",%nobits
 1849              		.set	.LANCHOR10,. + 0
 1852              	bNewData:
 1853 0000 00       		.space	1
 1854              		.section	.bss.bNewRamp,"aw",%nobits
 1855              		.set	.LANCHOR11,. + 0
 1858              	bNewRamp:
 1859 0000 00       		.space	1
 1860              		.section	.bss.hadc1,"aw",%nobits
 1861              		.align	2
 1862              		.set	.LANCHOR0,. + 0
 1865              	hadc1:
 1866 0000 00000000 		.space	72
 1866      00000000 
 1866      00000000 
 1866      00000000 
 1866      00000000 
 1867              		.section	.bss.hadc2,"aw",%nobits
 1868              		.align	2
 1869              		.set	.LANCHOR1,. + 0
 1872              	hadc2:
 1873 0000 00000000 		.space	72
 1873      00000000 
 1873      00000000 
 1873      00000000 
 1873      00000000 
 1874              		.section	.bss.hdac,"aw",%nobits
 1875              		.align	2
 1876              		.set	.LANCHOR3,. + 0
 1879              	hdac:
 1880 0000 00000000 		.space	20
 1880      00000000 
 1880      00000000 
 1880      00000000 
 1880      00000000 
 1881              		.section	.bss.hdma_adc1,"aw",%nobits
ARM GAS  /tmp/ccd0a1wf.s 			page 55


 1882              		.align	2
 1885              	hdma_adc1:
 1886 0000 00000000 		.space	96
 1886      00000000 
 1886      00000000 
 1886      00000000 
 1886      00000000 
 1887              		.section	.bss.hdma_adc2,"aw",%nobits
 1888              		.align	2
 1891              	hdma_adc2:
 1892 0000 00000000 		.space	96
 1892      00000000 
 1892      00000000 
 1892      00000000 
 1892      00000000 
 1893              		.section	.bss.hdma_dac1,"aw",%nobits
 1894              		.align	2
 1897              	hdma_dac1:
 1898 0000 00000000 		.space	96
 1898      00000000 
 1898      00000000 
 1898      00000000 
 1898      00000000 
 1899              		.section	.bss.htim2,"aw",%nobits
 1900              		.align	2
 1901              		.set	.LANCHOR4,. + 0
 1904              	htim2:
 1905 0000 00000000 		.space	72
 1905      00000000 
 1905      00000000 
 1905      00000000 
 1905      00000000 
 1906              		.section	.bss.huart2,"aw",%nobits
 1907              		.align	2
 1908              		.set	.LANCHOR2,. + 0
 1911              	huart2:
 1912 0000 00000000 		.space	68
 1912      00000000 
 1912      00000000 
 1912      00000000 
 1912      00000000 
 1913              		.section	.bss.nAvg,"aw",%nobits
 1914              		.align	1
 1915              		.set	.LANCHOR9,. + 0
 1918              	nAvg:
 1919 0000 0000     		.space	2
 1920              		.section	.bss.outBuff,"aw",%nobits
 1921              		.align	2
 1922              		.set	.LANCHOR12,. + 0
 1925              	outBuff:
 1926 0000 00000000 		.space	80
 1926      00000000 
 1926      00000000 
 1926      00000000 
 1926      00000000 
 1927              		.section	.bss.rampMin,"aw",%nobits
 1928              		.align	1
ARM GAS  /tmp/ccd0a1wf.s 			page 56


 1929              		.set	.LANCHOR6,. + 0
 1932              	rampMin:
 1933 0000 0000     		.space	2
 1934              		.section	.bss.ready_1_half,"aw",%nobits
 1935              		.set	.LANCHOR7,. + 0
 1938              	ready_1_half:
 1939 0000 00       		.space	1
 1940              		.section	.bss.ready_2_half,"aw",%nobits
 1941              		.set	.LANCHOR8,. + 0
 1944              	ready_2_half:
 1945 0000 00       		.space	1
 1946              		.section	.bss.txBuff,"aw",%nobits
 1947              		.align	2
 1950              	txBuff:
 1951 0000 00000000 		.space	8192
 1951      00000000 
 1951      00000000 
 1951      00000000 
 1951      00000000 
 1952              		.section	.data.rampMax,"aw"
 1953              		.align	1
 1954              		.set	.LANCHOR5,. + 0
 1957              	rampMax:
 1958 0000 FF0F     		.short	4095
 1959              		.text
 1960              	.Letext0:
 1961              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1962              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1963              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1964              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1965              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1966              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1967              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1968              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1969              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1970              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dac.h"
 1971              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1972              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1973              		.file 15 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1974              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1975              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1976              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr_ex.h"
 1977              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1978              		.file 20 "<built-in>"
 1979              		.file 21 "/usr/include/newlib/stdio.h"
 1980              		.file 22 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccd0a1wf.s 			page 57


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccd0a1wf.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccd0a1wf.s:162    .text.MX_GPIO_Init:000000000000009c $d
     /tmp/ccd0a1wf.s:169    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:175    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccd0a1wf.s:259    .text.MX_DMA_Init:0000000000000064 $d
     /tmp/ccd0a1wf.s:264    .text.buildRamp:0000000000000000 $t
     /tmp/ccd0a1wf.s:271    .text.buildRamp:0000000000000000 buildRamp
     /tmp/ccd0a1wf.s:335    .text.Error_Handler:0000000000000000 $t
     /tmp/ccd0a1wf.s:342    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccd0a1wf.s:374    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:380    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccd0a1wf.s:484    .text.MX_ADC1_Init:0000000000000068 $d
     /tmp/ccd0a1wf.s:490    .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:496    .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/ccd0a1wf.s:620    .text.MX_ADC2_Init:000000000000007c $d
     /tmp/ccd0a1wf.s:626    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:632    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccd0a1wf.s:686    .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccd0a1wf.s:692    .text.MX_DAC_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:698    .text.MX_DAC_Init:0000000000000000 MX_DAC_Init
     /tmp/ccd0a1wf.s:759    .text.MX_DAC_Init:0000000000000038 $d
     /tmp/ccd0a1wf.s:765    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccd0a1wf.s:771    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccd0a1wf.s:928    .text.MX_TIM2_Init:00000000000000a0 $d
     /tmp/ccd0a1wf.s:935    .text.SystemClockHSE_Config:0000000000000000 $t
     /tmp/ccd0a1wf.s:942    .text.SystemClockHSE_Config:0000000000000000 SystemClockHSE_Config
     /tmp/ccd0a1wf.s:1136   .text.SystemClockHSE_Config:00000000000000c0 $d
     /tmp/ccd0a1wf.s:1142   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccd0a1wf.s:1146   .text.main:0000000000000000 $t
     /tmp/ccd0a1wf.s:1153   .text.main:0000000000000000 main
     /tmp/ccd0a1wf.s:1532   .text.main:00000000000001dc $d
     /tmp/ccd0a1wf.s:1834   .bss.Ramp:0000000000000000 Ramp
     /tmp/ccd0a1wf.s:1846   .bss.avg:0000000000000000 avg
     /tmp/ccd0a1wf.s:1840   .bss.adc_val:0000000000000000 adc_val
     /tmp/ccd0a1wf.s:1950   .bss.txBuff:0000000000000000 txBuff
     /tmp/ccd0a1wf.s:1557   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccd0a1wf.s:1564   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccd0a1wf.s:1711   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccd0a1wf.s:1717   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccd0a1wf.s:1724   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccd0a1wf.s:1751   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000010 $d
     /tmp/ccd0a1wf.s:1757   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccd0a1wf.s:1764   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccd0a1wf.s:1803   .text.HAL_ADC_ConvCpltCallback:0000000000000020 $d
     /tmp/ccd0a1wf.s:1858   .bss.bNewRamp:0000000000000000 bNewRamp
     /tmp/ccd0a1wf.s:1925   .bss.outBuff:0000000000000000 outBuff
     /tmp/ccd0a1wf.s:1852   .bss.bNewData:0000000000000000 bNewData
     /tmp/ccd0a1wf.s:1944   .bss.ready_2_half:0000000000000000 ready_2_half
     /tmp/ccd0a1wf.s:1938   .bss.ready_1_half:0000000000000000 ready_1_half
     /tmp/ccd0a1wf.s:1957   .data.rampMax:0000000000000000 rampMax
     /tmp/ccd0a1wf.s:1932   .bss.rampMin:0000000000000000 rampMin
     /tmp/ccd0a1wf.s:1918   .bss.nAvg:0000000000000000 nAvg
     /tmp/ccd0a1wf.s:1911   .bss.huart2:0000000000000000 huart2
     /tmp/ccd0a1wf.s:1904   .bss.htim2:0000000000000000 htim2
ARM GAS  /tmp/ccd0a1wf.s 			page 58


     /tmp/ccd0a1wf.s:1897   .bss.hdma_dac1:0000000000000000 hdma_dac1
     /tmp/ccd0a1wf.s:1879   .bss.hdac:0000000000000000 hdac
     /tmp/ccd0a1wf.s:1891   .bss.hdma_adc2:0000000000000000 hdma_adc2
     /tmp/ccd0a1wf.s:1872   .bss.hadc2:0000000000000000 hadc2
     /tmp/ccd0a1wf.s:1885   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccd0a1wf.s:1865   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccd0a1wf.s:1831   .bss.Ramp:0000000000000000 $d
     /tmp/ccd0a1wf.s:1837   .bss.adc_val:0000000000000000 $d
     /tmp/ccd0a1wf.s:1843   .bss.avg:0000000000000000 $d
     /tmp/ccd0a1wf.s:1853   .bss.bNewData:0000000000000000 $d
     /tmp/ccd0a1wf.s:1859   .bss.bNewRamp:0000000000000000 $d
     /tmp/ccd0a1wf.s:1861   .bss.hadc1:0000000000000000 $d
     /tmp/ccd0a1wf.s:1868   .bss.hadc2:0000000000000000 $d
     /tmp/ccd0a1wf.s:1875   .bss.hdac:0000000000000000 $d
     /tmp/ccd0a1wf.s:1882   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccd0a1wf.s:1888   .bss.hdma_adc2:0000000000000000 $d
     /tmp/ccd0a1wf.s:1894   .bss.hdma_dac1:0000000000000000 $d
     /tmp/ccd0a1wf.s:1900   .bss.htim2:0000000000000000 $d
     /tmp/ccd0a1wf.s:1907   .bss.huart2:0000000000000000 $d
     /tmp/ccd0a1wf.s:1914   .bss.nAvg:0000000000000000 $d
     /tmp/ccd0a1wf.s:1921   .bss.outBuff:0000000000000000 $d
     /tmp/ccd0a1wf.s:1928   .bss.rampMin:0000000000000000 $d
     /tmp/ccd0a1wf.s:1939   .bss.ready_1_half:0000000000000000 $d
     /tmp/ccd0a1wf.s:1945   .bss.ready_2_half:0000000000000000 $d
     /tmp/ccd0a1wf.s:1947   .bss.txBuff:0000000000000000 $d
     /tmp/ccd0a1wf.s:1953   .data.rampMax:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
SystemCoreClock
HAL_RCC_ClockConfig
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
memset
HAL_Init
HAL_DAC_Start_DMA
HAL_ADC_Start_DMA
HAL_TIM_Base_Start
HAL_GPIO_TogglePin
memcpy
HAL_TIM_Base_Stop
HAL_DAC_Stop_DMA
HAL_ADC_Stop_DMA
HAL_ADC_Start_IT
HAL_ADC_GetValue
ARM GAS  /tmp/ccd0a1wf.s 			page 59


sprintf
strlen
HAL_UART_Transmit
